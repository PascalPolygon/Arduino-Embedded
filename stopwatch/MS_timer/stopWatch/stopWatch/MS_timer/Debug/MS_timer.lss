
MS_timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000b0a  00000b9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  0080011e  0080011e  00000bbc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d47  00000000  00000000  00000d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c1b  00000000  00000000  00002ac3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ec8  00000000  00000000  000036de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000358  00000000  00000000  000045a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008ad  00000000  00000000  00004900  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cb4  00000000  00000000  000051ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00005e61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__ctors_end>
   4:	0c 94 92 03 	jmp	0x724	; 0x724 <__vector_1>
   8:	0c 94 b9 03 	jmp	0x772	; 0x772 <__vector_2>
   c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  10:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  14:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  18:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  1c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  20:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  24:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  28:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_11>
  30:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  34:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  38:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  3c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  40:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__vector_16>
  44:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  48:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  4c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  50:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  54:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  58:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  5c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  60:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  64:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_end>:
  b8:	11 24       	eor	r1, r1
  ba:	1f be       	out	0x3f, r1	; 63
  bc:	cf ef       	ldi	r28, 0xFF	; 255
  be:	d8 e0       	ldi	r29, 0x08	; 8
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_copy_data>:
  c4:	11 e0       	ldi	r17, 0x01	; 1
  c6:	a0 e0       	ldi	r26, 0x00	; 0
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	ea e0       	ldi	r30, 0x0A	; 10
  cc:	fb e0       	ldi	r31, 0x0B	; 11
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <__do_copy_data+0x10>
  d0:	05 90       	lpm	r0, Z+
  d2:	0d 92       	st	X+, r0
  d4:	ae 31       	cpi	r26, 0x1E	; 30
  d6:	b1 07       	cpc	r27, r17
  d8:	d9 f7       	brne	.-10     	; 0xd0 <__do_copy_data+0xc>

000000da <__do_clear_bss>:
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	ae e1       	ldi	r26, 0x1E	; 30
  de:	b1 e0       	ldi	r27, 0x01	; 1
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <.do_clear_bss_start>

000000e2 <.do_clear_bss_loop>:
  e2:	1d 92       	st	X+, r1

000000e4 <.do_clear_bss_start>:
  e4:	ae 33       	cpi	r26, 0x3E	; 62
  e6:	b2 07       	cpc	r27, r18
  e8:	e1 f7       	brne	.-8      	; 0xe2 <.do_clear_bss_loop>
  ea:	0e 94 62 03 	call	0x6c4	; 0x6c4 <main>
  ee:	0c 94 83 05 	jmp	0xb06	; 0xb06 <_exit>

000000f2 <__bad_interrupt>:
  f2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f6 <_Z11stateChangev>:
  delay(timedelay);
}

void stateChange()
{
	state =! state;
  f6:	20 91 33 01 	lds	r18, 0x0133	; 0x800133 <state>
  fa:	30 91 34 01 	lds	r19, 0x0134	; 0x800134 <state+0x1>
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	23 2b       	or	r18, r19
 104:	11 f0       	breq	.+4      	; 0x10a <_Z11stateChangev+0x14>
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <state+0x1>
 10e:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <state>
 112:	08 95       	ret

00000114 <__vector_11>:

int timedelay = 5;

void disp(int num, int digit);

ISR(TIMER1_COMPA_vect){  //change the 0 to 1 fo timer1 and 2 for timer2//interrupt commands here
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	2f 93       	push	r18
 120:	3f 93       	push	r19
 122:	4f 93       	push	r20
 124:	5f 93       	push	r21
 126:	6f 93       	push	r22
 128:	7f 93       	push	r23
 12a:	8f 93       	push	r24
 12c:	9f 93       	push	r25
 12e:	af 93       	push	r26
 130:	bf 93       	push	r27

if (state == LOW)
 132:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <state>
 136:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <state+0x1>
 13a:	89 2b       	or	r24, r25
 13c:	09 f0       	breq	.+2      	; 0x140 <__vector_11+0x2c>
 13e:	72 c0       	rjmp	.+228    	; 0x224 <__vector_11+0x110>
{
	huns = i%10;
 140:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <i>
 144:	30 91 30 01 	lds	r19, 0x0130	; 0x800130 <i+0x1>
 148:	c9 01       	movw	r24, r18
 14a:	6a e0       	ldi	r22, 0x0A	; 10
 14c:	70 e0       	ldi	r23, 0x00	; 0
 14e:	0e 94 5b 05 	call	0xab6	; 0xab6 <__divmodhi4>
 152:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <huns+0x1>
 156:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <huns>
	i++;
 15a:	2f 5f       	subi	r18, 0xFF	; 255
 15c:	3f 4f       	sbci	r19, 0xFF	; 255
 15e:	30 93 30 01 	sts	0x0130, r19	; 0x800130 <i+0x1>
 162:	20 93 2f 01 	sts	0x012F, r18	; 0x80012f <i>
	c1 = i>0?true:false;
 166:	41 e0       	ldi	r20, 0x01	; 1
 168:	12 16       	cp	r1, r18
 16a:	13 06       	cpc	r1, r19
 16c:	0c f0       	brlt	.+2      	; 0x170 <__vector_11+0x5c>
 16e:	40 e0       	ldi	r20, 0x00	; 0
 170:	40 93 28 01 	sts	0x0128, r20	; 0x800128 <c1>
	if (huns == 0 && c1 == true)
 174:	89 2b       	or	r24, r25
 176:	09 f0       	breq	.+2      	; 0x17a <__vector_11+0x66>
 178:	55 c0       	rjmp	.+170    	; 0x224 <__vector_11+0x110>
 17a:	12 16       	cp	r1, r18
 17c:	13 06       	cpc	r1, r19
 17e:	0c f0       	brlt	.+2      	; 0x182 <__vector_11+0x6e>
 180:	51 c0       	rjmp	.+162    	; 0x224 <__vector_11+0x110>
	{
		c1 = true ;
		tens = j%10;
 182:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <j>
 186:	30 91 2e 01 	lds	r19, 0x012E	; 0x80012e <j+0x1>
 18a:	c9 01       	movw	r24, r18
 18c:	6a e0       	ldi	r22, 0x0A	; 10
 18e:	70 e0       	ldi	r23, 0x00	; 0
 190:	0e 94 5b 05 	call	0xab6	; 0xab6 <__divmodhi4>
 194:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <tens+0x1>
 198:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <tens>
		j++;
 19c:	2f 5f       	subi	r18, 0xFF	; 255
 19e:	3f 4f       	sbci	r19, 0xFF	; 255
 1a0:	30 93 2e 01 	sts	0x012E, r19	; 0x80012e <j+0x1>
 1a4:	20 93 2d 01 	sts	0x012D, r18	; 0x80012d <j>
		c2 = j>0?true:false;
 1a8:	41 e0       	ldi	r20, 0x01	; 1
 1aa:	12 16       	cp	r1, r18
 1ac:	13 06       	cpc	r1, r19
 1ae:	0c f0       	brlt	.+2      	; 0x1b2 <__vector_11+0x9e>
 1b0:	40 e0       	ldi	r20, 0x00	; 0
 1b2:	40 93 27 01 	sts	0x0127, r20	; 0x800127 <c2>
		if (tens == 0 && c2 == true)
 1b6:	89 2b       	or	r24, r25
 1b8:	a9 f5       	brne	.+106    	; 0x224 <__vector_11+0x110>
 1ba:	12 16       	cp	r1, r18
 1bc:	13 06       	cpc	r1, r19
 1be:	94 f5       	brge	.+100    	; 0x224 <__vector_11+0x110>
		{
			c2 = true;
			twos = k%10;
 1c0:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <k>
 1c4:	30 91 2c 01 	lds	r19, 0x012C	; 0x80012c <k+0x1>
 1c8:	c9 01       	movw	r24, r18
 1ca:	6a e0       	ldi	r22, 0x0A	; 10
 1cc:	70 e0       	ldi	r23, 0x00	; 0
 1ce:	0e 94 5b 05 	call	0xab6	; 0xab6 <__divmodhi4>
 1d2:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <twos+0x1>
 1d6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <twos>
			k++;
 1da:	2f 5f       	subi	r18, 0xFF	; 255
 1dc:	3f 4f       	sbci	r19, 0xFF	; 255
 1de:	30 93 2c 01 	sts	0x012C, r19	; 0x80012c <k+0x1>
 1e2:	20 93 2b 01 	sts	0x012B, r18	; 0x80012b <k>
			c3 = k>0?true:false;
 1e6:	41 e0       	ldi	r20, 0x01	; 1
 1e8:	12 16       	cp	r1, r18
 1ea:	13 06       	cpc	r1, r19
 1ec:	0c f0       	brlt	.+2      	; 0x1f0 <__vector_11+0xdc>
 1ee:	40 e0       	ldi	r20, 0x00	; 0
 1f0:	40 93 26 01 	sts	0x0126, r20	; 0x800126 <c3>
			if (twos == 0 && c3 == true)
 1f4:	89 2b       	or	r24, r25
 1f6:	b1 f4       	brne	.+44     	; 0x224 <__vector_11+0x110>
 1f8:	12 16       	cp	r1, r18
 1fa:	13 06       	cpc	r1, r19
 1fc:	9c f4       	brge	.+38     	; 0x224 <__vector_11+0x110>
			{
				c3 = true;
				ones = l%10;
 1fe:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <l>
 202:	30 91 2a 01 	lds	r19, 0x012A	; 0x80012a <l+0x1>
 206:	c9 01       	movw	r24, r18
 208:	6a e0       	ldi	r22, 0x0A	; 10
 20a:	70 e0       	ldi	r23, 0x00	; 0
 20c:	0e 94 5b 05 	call	0xab6	; 0xab6 <__divmodhi4>
 210:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <__data_end+0x1>
 214:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
				l++;
 218:	2f 5f       	subi	r18, 0xFF	; 255
 21a:	3f 4f       	sbci	r19, 0xFF	; 255
 21c:	30 93 2a 01 	sts	0x012A, r19	; 0x80012a <l+0x1>
 220:	20 93 29 01 	sts	0x0129, r18	; 0x800129 <l>
	}

}


}
 224:	bf 91       	pop	r27
 226:	af 91       	pop	r26
 228:	9f 91       	pop	r25
 22a:	8f 91       	pop	r24
 22c:	7f 91       	pop	r23
 22e:	6f 91       	pop	r22
 230:	5f 91       	pop	r21
 232:	4f 91       	pop	r20
 234:	3f 91       	pop	r19
 236:	2f 91       	pop	r18
 238:	0f 90       	pop	r0
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	0f 90       	pop	r0
 23e:	1f 90       	pop	r1
 240:	18 95       	reti

00000242 <setup>:


void setup() {
  //Serial.begin(9600); 
  
  pinMode(pinA, OUTPUT);
 242:	61 e0       	ldi	r22, 0x01	; 1
 244:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <pinA>
 248:	0e 94 ef 04 	call	0x9de	; 0x9de <pinMode>
  pinMode(pinB, OUTPUT);
 24c:	61 e0       	ldi	r22, 0x01	; 1
 24e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <pinB>
 252:	0e 94 ef 04 	call	0x9de	; 0x9de <pinMode>
  pinMode(pinC, OUTPUT);
 256:	61 e0       	ldi	r22, 0x01	; 1
 258:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <pinC>
 25c:	0e 94 ef 04 	call	0x9de	; 0x9de <pinMode>
  pinMode(pinD, OUTPUT);
 260:	61 e0       	ldi	r22, 0x01	; 1
 262:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <pinD>
 266:	0e 94 ef 04 	call	0x9de	; 0x9de <pinMode>
  pinMode(pinE, OUTPUT);
 26a:	61 e0       	ldi	r22, 0x01	; 1
 26c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pinE>
 270:	0e 94 ef 04 	call	0x9de	; 0x9de <pinMode>
  pinMode(pinF, OUTPUT);
 274:	61 e0       	ldi	r22, 0x01	; 1
 276:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pinF>
 27a:	0e 94 ef 04 	call	0x9de	; 0x9de <pinMode>
  pinMode(pinG, OUTPUT);
 27e:	61 e0       	ldi	r22, 0x01	; 1
 280:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <pinG>
 284:	0e 94 ef 04 	call	0x9de	; 0x9de <pinMode>

  pinMode(pinDecimal, OUTPUT);
 288:	61 e0       	ldi	r22, 0x01	; 1
 28a:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <pinDecimal>
 28e:	0e 94 ef 04 	call	0x9de	; 0x9de <pinMode>

  pinMode(pinD1, OUTPUT);
 292:	61 e0       	ldi	r22, 0x01	; 1
 294:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pinD1>
 298:	0e 94 ef 04 	call	0x9de	; 0x9de <pinMode>
  pinMode(pinD2, OUTPUT);
 29c:	61 e0       	ldi	r22, 0x01	; 1
 29e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pinD2>
 2a2:	0e 94 ef 04 	call	0x9de	; 0x9de <pinMode>
  pinMode(pinD3, OUTPUT);
 2a6:	61 e0       	ldi	r22, 0x01	; 1
 2a8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pinD3>
 2ac:	0e 94 ef 04 	call	0x9de	; 0x9de <pinMode>
  pinMode(pinD4, OUTPUT);
 2b0:	61 e0       	ldi	r22, 0x01	; 1
 2b2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <pinD4>
 2b6:	0e 94 ef 04 	call	0x9de	; 0x9de <pinMode>
  
  pinMode(pbIn, INPUT_PULLUP);
 2ba:	62 e0       	ldi	r22, 0x02	; 2
 2bc:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <pbIn>
 2c0:	0e 94 ef 04 	call	0x9de	; 0x9de <pinMode>
  attachInterrupt(digitalPinToInterrupt(pbIn), stateChange, RISING);
 2c4:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <pbIn>
 2c8:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <pbIn+0x1>
 2cc:	82 30       	cpi	r24, 0x02	; 2
 2ce:	91 05       	cpc	r25, r1
 2d0:	21 f0       	breq	.+8      	; 0x2da <setup+0x98>
 2d2:	03 97       	sbiw	r24, 0x03	; 3
 2d4:	21 f0       	breq	.+8      	; 0x2de <setup+0x9c>
 2d6:	8f ef       	ldi	r24, 0xFF	; 255
 2d8:	03 c0       	rjmp	.+6      	; 0x2e0 <setup+0x9e>
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	01 c0       	rjmp	.+2      	; 0x2e0 <setup+0x9e>
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	43 e0       	ldi	r20, 0x03	; 3
 2e2:	50 e0       	ldi	r21, 0x00	; 0
 2e4:	6b e7       	ldi	r22, 0x7B	; 123
 2e6:	70 e0       	ldi	r23, 0x00	; 0
 2e8:	0e 94 72 03 	call	0x6e4	; 0x6e4 <attachInterrupt>
  
  cli(); //top interrupts
 2ec:	f8 94       	cli
  //set timer1 interrupt at 1kHz
  TCCR1A = 0;// Timer/Counter Control Registers set TCCR1A register=0
 2ee:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  TCCR1B = 0;// same for TCCR1B
 2f2:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  TCNT1  = 0;//Timer/Counter initialize counter value to 0
 2f6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2fa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  // set timer count for 1khz increments
  OCR1A = 19999;// Compare Registers = (16*10^6) / (100*8) - 1
 2fe:	8f e1       	ldi	r24, 0x1F	; 31
 300:	9e e4       	ldi	r25, 0x4E	; 78
 302:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 306:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  //had to use 16 bit timer1 since 1999>255, but could switch to timers 0 or 2 with larger prescaler
  // turn on CTC mode
  TCCR1B |= (1 << WGM12);
 30a:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 30e:	88 60       	ori	r24, 0x08	; 8
 310:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  // Set CS11 bit for 8 prescaler
  TCCR1B |= (1 << CS11);
 314:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 318:	82 60       	ori	r24, 0x02	; 2
 31a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  // enable timer compare interrupt
  TIMSK1 |= (1 << OCIE1A); //Timer interrupt Mask
 31e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 322:	82 60       	ori	r24, 0x02	; 2
 324:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  sei();//allow interrupts
 328:	78 94       	sei
 32a:	08 95       	ret

0000032c <_Z4dispii>:
void stateChange()
{
	state =! state;
}
void disp(int num, int digit)
{
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	ec 01       	movw	r28, r24

 // turnOff();
  if (digit == 1)
 332:	61 30       	cpi	r22, 0x01	; 1
 334:	71 05       	cpc	r23, r1
 336:	39 f4       	brne	.+14     	; 0x346 <_Z4dispii+0x1a>
  {
    digitalWrite(pinD1, LOW); 
 338:	60 e0       	ldi	r22, 0x00	; 0
 33a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pinD1>
 33e:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
    digitalWrite(pinD2, HIGH);
 342:	61 e0       	ldi	r22, 0x01	; 1
 344:	09 c0       	rjmp	.+18     	; 0x358 <_Z4dispii+0x2c>
    digitalWrite(pinD3, HIGH);
    digitalWrite(pinD4, HIGH);
  }
  else if (digit == 2)
 346:	62 30       	cpi	r22, 0x02	; 2
 348:	71 05       	cpc	r23, r1
 34a:	61 f4       	brne	.+24     	; 0x364 <_Z4dispii+0x38>
  {
    digitalWrite(pinD1, HIGH); 
 34c:	61 e0       	ldi	r22, 0x01	; 1
 34e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pinD1>
 352:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
    digitalWrite(pinD2, LOW);
 356:	60 e0       	ldi	r22, 0x00	; 0
 358:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pinD2>
 35c:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
    digitalWrite(pinD3, HIGH);
 360:	61 e0       	ldi	r22, 0x01	; 1
 362:	0e c0       	rjmp	.+28     	; 0x380 <_Z4dispii+0x54>
    digitalWrite(pinD4, HIGH);
  }
  else if (digit == 3)
 364:	63 30       	cpi	r22, 0x03	; 3
 366:	71 05       	cpc	r23, r1
 368:	89 f4       	brne	.+34     	; 0x38c <_Z4dispii+0x60>
  {
    digitalWrite(pinD1, HIGH); 
 36a:	61 e0       	ldi	r22, 0x01	; 1
 36c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pinD1>
 370:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
    digitalWrite(pinD2, HIGH);
 374:	61 e0       	ldi	r22, 0x01	; 1
 376:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pinD2>
 37a:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
    digitalWrite(pinD3, LOW);
 37e:	60 e0       	ldi	r22, 0x00	; 0
 380:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pinD3>
 384:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
    digitalWrite(pinD4, HIGH);
 388:	61 e0       	ldi	r22, 0x01	; 1
 38a:	13 c0       	rjmp	.+38     	; 0x3b2 <_Z4dispii+0x86>
  }
  else if (digit == 4)
 38c:	64 30       	cpi	r22, 0x04	; 4
 38e:	71 05       	cpc	r23, r1
 390:	a1 f4       	brne	.+40     	; 0x3ba <_Z4dispii+0x8e>
  {
    digitalWrite(pinD1, HIGH); 
 392:	61 e0       	ldi	r22, 0x01	; 1
 394:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pinD1>
 398:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
    digitalWrite(pinD2, HIGH);
 39c:	61 e0       	ldi	r22, 0x01	; 1
 39e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pinD2>
 3a2:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
    digitalWrite(pinD3, HIGH);
 3a6:	61 e0       	ldi	r22, 0x01	; 1
 3a8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pinD3>
 3ac:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
    digitalWrite(pinD4, LOW);
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <pinD4>
 3b6:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
  }

  

    if (num == 0)
 3ba:	20 97       	sbiw	r28, 0x00	; 0
 3bc:	d9 f4       	brne	.+54     	; 0x3f4 <_Z4dispii+0xc8>
    {
      digitalWrite(pinA, HIGH);
 3be:	61 e0       	ldi	r22, 0x01	; 1
 3c0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <pinA>
 3c4:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinB, HIGH);
 3c8:	61 e0       	ldi	r22, 0x01	; 1
 3ca:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <pinB>
 3ce:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinC, HIGH);
 3d2:	61 e0       	ldi	r22, 0x01	; 1
 3d4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <pinC>
 3d8:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinD, HIGH);
 3dc:	61 e0       	ldi	r22, 0x01	; 1
 3de:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <pinD>
 3e2:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinE, HIGH);
 3e6:	61 e0       	ldi	r22, 0x01	; 1
 3e8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pinE>
 3ec:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinF, HIGH);
 3f0:	61 e0       	ldi	r22, 0x01	; 1
 3f2:	1d c0       	rjmp	.+58     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
      digitalWrite(pinG, LOW);
    }
    else if (num == 1)
 3f4:	c1 30       	cpi	r28, 0x01	; 1
 3f6:	d1 05       	cpc	r29, r1
 3f8:	01 f5       	brne	.+64     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
    {
      digitalWrite(pinA, LOW);
 3fa:	60 e0       	ldi	r22, 0x00	; 0
 3fc:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <pinA>
 400:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinB, HIGH);
 404:	61 e0       	ldi	r22, 0x01	; 1
 406:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <pinB>
 40a:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinC, HIGH);
 40e:	61 e0       	ldi	r22, 0x01	; 1
 410:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <pinC>
 414:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinD, LOW);
 418:	60 e0       	ldi	r22, 0x00	; 0
 41a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <pinD>
 41e:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinE, LOW);
 422:	60 e0       	ldi	r22, 0x00	; 0
 424:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pinE>
 428:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinF, LOW);
 42c:	60 e0       	ldi	r22, 0x00	; 0
 42e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pinF>
 432:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinG, LOW);
 436:	60 e0       	ldi	r22, 0x00	; 0
 438:	f1 c0       	rjmp	.+482    	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
    }
    else if (num == 2)
 43a:	c2 30       	cpi	r28, 0x02	; 2
 43c:	d1 05       	cpc	r29, r1
 43e:	d9 f4       	brne	.+54     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
    {
      digitalWrite(pinA, HIGH);
 440:	61 e0       	ldi	r22, 0x01	; 1
 442:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <pinA>
 446:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinB, HIGH);
 44a:	61 e0       	ldi	r22, 0x01	; 1
 44c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <pinB>
 450:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinC, LOW);
 454:	60 e0       	ldi	r22, 0x00	; 0
 456:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <pinC>
 45a:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinG, HIGH);
 45e:	61 e0       	ldi	r22, 0x01	; 1
 460:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <pinG>
 464:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinD, HIGH);
 468:	61 e0       	ldi	r22, 0x01	; 1
 46a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <pinD>
 46e:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinE, HIGH);
 472:	61 e0       	ldi	r22, 0x01	; 1
 474:	1d c0       	rjmp	.+58     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
      digitalWrite(pinF, LOW);
    }
    else if (num == 3)
 476:	c3 30       	cpi	r28, 0x03	; 3
 478:	d1 05       	cpc	r29, r1
 47a:	11 f5       	brne	.+68     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
    {
      digitalWrite(pinA, HIGH);
 47c:	61 e0       	ldi	r22, 0x01	; 1
 47e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <pinA>
 482:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinB, HIGH);
 486:	61 e0       	ldi	r22, 0x01	; 1
 488:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <pinB>
 48c:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinG, HIGH);
 490:	61 e0       	ldi	r22, 0x01	; 1
 492:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <pinG>
 496:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinD, HIGH);
 49a:	61 e0       	ldi	r22, 0x01	; 1
 49c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <pinD>
 4a0:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinC, HIGH);
 4a4:	61 e0       	ldi	r22, 0x01	; 1
 4a6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <pinC>
 4aa:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinE, LOW);
 4ae:	60 e0       	ldi	r22, 0x00	; 0
 4b0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pinE>
 4b4:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinF, LOW);
 4b8:	60 e0       	ldi	r22, 0x00	; 0
 4ba:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pinF>
 4be:	b0 c0       	rjmp	.+352    	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
    }
    else if (num == 4)
 4c0:	c4 30       	cpi	r28, 0x04	; 4
 4c2:	d1 05       	cpc	r29, r1
 4c4:	11 f5       	brne	.+68     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
    {
      digitalWrite(pinA, LOW);
 4c6:	60 e0       	ldi	r22, 0x00	; 0
 4c8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <pinA>
 4cc:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinF, HIGH);
 4d0:	61 e0       	ldi	r22, 0x01	; 1
 4d2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pinF>
 4d6:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinB, HIGH);
 4da:	61 e0       	ldi	r22, 0x01	; 1
 4dc:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <pinB>
 4e0:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinG, HIGH);
 4e4:	61 e0       	ldi	r22, 0x01	; 1
 4e6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <pinG>
 4ea:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinC, HIGH);
 4ee:	61 e0       	ldi	r22, 0x01	; 1
 4f0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <pinC>
 4f4:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinE, LOW);
 4f8:	60 e0       	ldi	r22, 0x00	; 0
 4fa:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pinE>
 4fe:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinD, LOW);
 502:	60 e0       	ldi	r22, 0x00	; 0
 504:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <pinD>
 508:	8b c0       	rjmp	.+278    	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
    }
    else if (num == 5)
 50a:	c5 30       	cpi	r28, 0x05	; 5
 50c:	d1 05       	cpc	r29, r1
 50e:	11 f5       	brne	.+68     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
    {
      digitalWrite(pinA, HIGH);
 510:	61 e0       	ldi	r22, 0x01	; 1
 512:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <pinA>
 516:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinB, LOW);
 51a:	60 e0       	ldi	r22, 0x00	; 0
 51c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <pinB>
 520:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinF, HIGH);
 524:	61 e0       	ldi	r22, 0x01	; 1
 526:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pinF>
 52a:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinG, HIGH);
 52e:	61 e0       	ldi	r22, 0x01	; 1
 530:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <pinG>
 534:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinD, HIGH);
 538:	61 e0       	ldi	r22, 0x01	; 1
 53a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <pinD>
 53e:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinC, HIGH);
 542:	61 e0       	ldi	r22, 0x01	; 1
 544:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <pinC>
 548:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinE, LOW);
 54c:	60 e0       	ldi	r22, 0x00	; 0
 54e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pinE>
 552:	66 c0       	rjmp	.+204    	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
    }
    else if (num == 6)
 554:	c6 30       	cpi	r28, 0x06	; 6
 556:	d1 05       	cpc	r29, r1
 558:	11 f5       	brne	.+68     	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
    {
      digitalWrite(pinA, HIGH);
 55a:	61 e0       	ldi	r22, 0x01	; 1
 55c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <pinA>
 560:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinF, HIGH);
 564:	61 e0       	ldi	r22, 0x01	; 1
 566:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pinF>
 56a:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinG, HIGH);
 56e:	61 e0       	ldi	r22, 0x01	; 1
 570:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <pinG>
 574:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinD, HIGH);
 578:	61 e0       	ldi	r22, 0x01	; 1
 57a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <pinD>
 57e:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinC, HIGH);
 582:	61 e0       	ldi	r22, 0x01	; 1
 584:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <pinC>
 588:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinE, HIGH);
 58c:	61 e0       	ldi	r22, 0x01	; 1
 58e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pinE>
 592:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinB, LOW);
 596:	60 e0       	ldi	r22, 0x00	; 0
 598:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <pinB>
 59c:	41 c0       	rjmp	.+130    	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
    }
    else if (num == 7)
 59e:	c7 30       	cpi	r28, 0x07	; 7
 5a0:	d1 05       	cpc	r29, r1
 5a2:	11 f4       	brne	.+4      	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
    {
      digitalWrite(pinA, HIGH);
 5a4:	61 e0       	ldi	r22, 0x01	; 1
 5a6:	2a cf       	rjmp	.-428    	; 0x3fc <_Z4dispii+0xd0>
      digitalWrite(pinD, LOW);
      digitalWrite(pinE, LOW);
      digitalWrite(pinF, LOW);
      digitalWrite(pinG, LOW);
    }
    else if (num == 8)
 5a8:	c8 30       	cpi	r28, 0x08	; 8
 5aa:	d1 05       	cpc	r29, r1
 5ac:	b1 f4       	brne	.+44     	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
    {
      digitalWrite(pinA, HIGH);
 5ae:	61 e0       	ldi	r22, 0x01	; 1
 5b0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <pinA>
 5b4:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinB, HIGH);
 5b8:	61 e0       	ldi	r22, 0x01	; 1
 5ba:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <pinB>
 5be:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinC, HIGH);
 5c2:	61 e0       	ldi	r22, 0x01	; 1
 5c4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <pinC>
 5c8:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinD, HIGH);
 5cc:	61 e0       	ldi	r22, 0x01	; 1
 5ce:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <pinD>
 5d2:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinE, HIGH);
 5d6:	61 e0       	ldi	r22, 0x01	; 1
 5d8:	17 c0       	rjmp	.+46     	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
      digitalWrite(pinF, HIGH);
      digitalWrite(pinG, HIGH);
    }
    else if (num == 9)
 5da:	29 97       	sbiw	r28, 0x09	; 9
 5dc:	19 f5       	brne	.+70     	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
    {
      digitalWrite(pinA, HIGH);
 5de:	61 e0       	ldi	r22, 0x01	; 1
 5e0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <pinA>
 5e4:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinB, HIGH);
 5e8:	61 e0       	ldi	r22, 0x01	; 1
 5ea:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <pinB>
 5ee:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinC, HIGH);
 5f2:	61 e0       	ldi	r22, 0x01	; 1
 5f4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <pinC>
 5f8:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinD, HIGH);
 5fc:	61 e0       	ldi	r22, 0x01	; 1
 5fe:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <pinD>
 602:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinE, LOW);
 606:	60 e0       	ldi	r22, 0x00	; 0
 608:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pinE>
 60c:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinF, HIGH);
 610:	61 e0       	ldi	r22, 0x01	; 1
 612:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pinF>
 616:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
      digitalWrite(pinG, HIGH);
 61a:	61 e0       	ldi	r22, 0x01	; 1
 61c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <pinG>
 620:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
    }
	digitalWrite(pinDecimal,HIGH);
 624:	61 e0       	ldi	r22, 0x01	; 1
 626:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <pinDecimal>
  }
 62a:	df 91       	pop	r29
 62c:	cf 91       	pop	r28
      digitalWrite(pinD, HIGH);
      digitalWrite(pinE, LOW);
      digitalWrite(pinF, HIGH);
      digitalWrite(pinG, HIGH);
    }
	digitalWrite(pinDecimal,HIGH);
 62e:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <digitalWrite>

00000632 <loop>:
}

void loop() 
{
  //timedelay =(timedelay+HUNS)*4;
  disp(huns, 4);
 632:	64 e0       	ldi	r22, 0x04	; 4
 634:	70 e0       	ldi	r23, 0x00	; 0
 636:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <huns>
 63a:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <huns+0x1>
 63e:	0e 94 96 01 	call	0x32c	; 0x32c <_Z4dispii>
  delay(timedelay);
 642:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 646:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 64a:	07 2e       	mov	r0, r23
 64c:	00 0c       	add	r0, r0
 64e:	88 0b       	sbc	r24, r24
 650:	99 0b       	sbc	r25, r25
 652:	0e 94 4f 04 	call	0x89e	; 0x89e <delay>
  disp(tens, 3);
 656:	63 e0       	ldi	r22, 0x03	; 3
 658:	70 e0       	ldi	r23, 0x00	; 0
 65a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <tens>
 65e:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <tens+0x1>
 662:	0e 94 96 01 	call	0x32c	; 0x32c <_Z4dispii>
  delay(timedelay);
 666:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 66a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 66e:	07 2e       	mov	r0, r23
 670:	00 0c       	add	r0, r0
 672:	88 0b       	sbc	r24, r24
 674:	99 0b       	sbc	r25, r25
 676:	0e 94 4f 04 	call	0x89e	; 0x89e <delay>
  disp(twos, 2);
 67a:	62 e0       	ldi	r22, 0x02	; 2
 67c:	70 e0       	ldi	r23, 0x00	; 0
 67e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <twos>
 682:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <twos+0x1>
 686:	0e 94 96 01 	call	0x32c	; 0x32c <_Z4dispii>
  delay(timedelay);
 68a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 68e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 692:	07 2e       	mov	r0, r23
 694:	00 0c       	add	r0, r0
 696:	88 0b       	sbc	r24, r24
 698:	99 0b       	sbc	r25, r25
 69a:	0e 94 4f 04 	call	0x89e	; 0x89e <delay>
  disp(ones, 1);
 69e:	61 e0       	ldi	r22, 0x01	; 1
 6a0:	70 e0       	ldi	r23, 0x00	; 0
 6a2:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
 6a6:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
 6aa:	0e 94 96 01 	call	0x32c	; 0x32c <_Z4dispii>
  delay(timedelay);
 6ae:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 6b2:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 6b6:	07 2e       	mov	r0, r23
 6b8:	00 0c       	add	r0, r0
 6ba:	88 0b       	sbc	r24, r24
 6bc:	99 0b       	sbc	r25, r25
 6be:	0c 94 4f 04 	jmp	0x89e	; 0x89e <delay>

000006c2 <initVariant>:
 6c2:	08 95       	ret

000006c4 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 6c4:	0e 94 8b 04 	call	0x916	; 0x916 <init>

	initVariant();
 6c8:	0e 94 61 03 	call	0x6c2	; 0x6c2 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 6cc:	0e 94 21 01 	call	0x242	; 0x242 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 6d0:	c0 e0       	ldi	r28, 0x00	; 0
 6d2:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 6d4:	0e 94 19 03 	call	0x632	; 0x632 <loop>
		if (serialEventRun) serialEventRun();
 6d8:	20 97       	sbiw	r28, 0x00	; 0
 6da:	e1 f3       	breq	.-8      	; 0x6d4 <main+0x10>
 6dc:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 6e0:	f9 cf       	rjmp	.-14     	; 0x6d4 <main+0x10>

000006e2 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
 6e2:	08 95       	ret

000006e4 <attachInterrupt>:
 6e4:	82 30       	cpi	r24, 0x02	; 2
 6e6:	e8 f4       	brcc	.+58     	; 0x722 <attachInterrupt+0x3e>
 6e8:	e8 2f       	mov	r30, r24
 6ea:	f0 e0       	ldi	r31, 0x00	; 0
 6ec:	ee 0f       	add	r30, r30
 6ee:	ff 1f       	adc	r31, r31
 6f0:	e6 5e       	subi	r30, 0xE6	; 230
 6f2:	fe 4f       	sbci	r31, 0xFE	; 254
 6f4:	71 83       	std	Z+1, r23	; 0x01
 6f6:	60 83       	st	Z, r22
 6f8:	81 30       	cpi	r24, 0x01	; 1
 6fa:	41 f0       	breq	.+16     	; 0x70c <attachInterrupt+0x28>
 6fc:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 700:	8c 7f       	andi	r24, 0xFC	; 252
 702:	48 2b       	or	r20, r24
 704:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 708:	e8 9a       	sbi	0x1d, 0	; 29
 70a:	08 95       	ret
 70c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 710:	83 7f       	andi	r24, 0xF3	; 243
 712:	44 0f       	add	r20, r20
 714:	55 1f       	adc	r21, r21
 716:	44 0f       	add	r20, r20
 718:	55 1f       	adc	r21, r21
 71a:	48 2b       	or	r20, r24
 71c:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 720:	e9 9a       	sbi	0x1d, 1	; 29
 722:	08 95       	ret

00000724 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
 724:	1f 92       	push	r1
 726:	0f 92       	push	r0
 728:	0f b6       	in	r0, 0x3f	; 63
 72a:	0f 92       	push	r0
 72c:	11 24       	eor	r1, r1
 72e:	2f 93       	push	r18
 730:	3f 93       	push	r19
 732:	4f 93       	push	r20
 734:	5f 93       	push	r21
 736:	6f 93       	push	r22
 738:	7f 93       	push	r23
 73a:	8f 93       	push	r24
 73c:	9f 93       	push	r25
 73e:	af 93       	push	r26
 740:	bf 93       	push	r27
 742:	ef 93       	push	r30
 744:	ff 93       	push	r31
 746:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <intFunc>
 74a:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <intFunc+0x1>
 74e:	09 95       	icall
 750:	ff 91       	pop	r31
 752:	ef 91       	pop	r30
 754:	bf 91       	pop	r27
 756:	af 91       	pop	r26
 758:	9f 91       	pop	r25
 75a:	8f 91       	pop	r24
 75c:	7f 91       	pop	r23
 75e:	6f 91       	pop	r22
 760:	5f 91       	pop	r21
 762:	4f 91       	pop	r20
 764:	3f 91       	pop	r19
 766:	2f 91       	pop	r18
 768:	0f 90       	pop	r0
 76a:	0f be       	out	0x3f, r0	; 63
 76c:	0f 90       	pop	r0
 76e:	1f 90       	pop	r1
 770:	18 95       	reti

00000772 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
 772:	1f 92       	push	r1
 774:	0f 92       	push	r0
 776:	0f b6       	in	r0, 0x3f	; 63
 778:	0f 92       	push	r0
 77a:	11 24       	eor	r1, r1
 77c:	2f 93       	push	r18
 77e:	3f 93       	push	r19
 780:	4f 93       	push	r20
 782:	5f 93       	push	r21
 784:	6f 93       	push	r22
 786:	7f 93       	push	r23
 788:	8f 93       	push	r24
 78a:	9f 93       	push	r25
 78c:	af 93       	push	r26
 78e:	bf 93       	push	r27
 790:	ef 93       	push	r30
 792:	ff 93       	push	r31
 794:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <intFunc+0x2>
 798:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <intFunc+0x3>
 79c:	09 95       	icall
 79e:	ff 91       	pop	r31
 7a0:	ef 91       	pop	r30
 7a2:	bf 91       	pop	r27
 7a4:	af 91       	pop	r26
 7a6:	9f 91       	pop	r25
 7a8:	8f 91       	pop	r24
 7aa:	7f 91       	pop	r23
 7ac:	6f 91       	pop	r22
 7ae:	5f 91       	pop	r21
 7b0:	4f 91       	pop	r20
 7b2:	3f 91       	pop	r19
 7b4:	2f 91       	pop	r18
 7b6:	0f 90       	pop	r0
 7b8:	0f be       	out	0x3f, r0	; 63
 7ba:	0f 90       	pop	r0
 7bc:	1f 90       	pop	r1
 7be:	18 95       	reti

000007c0 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 7c0:	1f 92       	push	r1
 7c2:	0f 92       	push	r0
 7c4:	0f b6       	in	r0, 0x3f	; 63
 7c6:	0f 92       	push	r0
 7c8:	11 24       	eor	r1, r1
 7ca:	2f 93       	push	r18
 7cc:	3f 93       	push	r19
 7ce:	8f 93       	push	r24
 7d0:	9f 93       	push	r25
 7d2:	af 93       	push	r26
 7d4:	bf 93       	push	r27
 7d6:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <timer0_millis>
 7da:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <timer0_millis+0x1>
 7de:	a0 91 38 01 	lds	r26, 0x0138	; 0x800138 <timer0_millis+0x2>
 7e2:	b0 91 39 01 	lds	r27, 0x0139	; 0x800139 <timer0_millis+0x3>
 7e6:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <timer0_fract>
 7ea:	23 e0       	ldi	r18, 0x03	; 3
 7ec:	23 0f       	add	r18, r19
 7ee:	2d 37       	cpi	r18, 0x7D	; 125
 7f0:	20 f4       	brcc	.+8      	; 0x7fa <__vector_16+0x3a>
 7f2:	01 96       	adiw	r24, 0x01	; 1
 7f4:	a1 1d       	adc	r26, r1
 7f6:	b1 1d       	adc	r27, r1
 7f8:	05 c0       	rjmp	.+10     	; 0x804 <__vector_16+0x44>
 7fa:	26 e8       	ldi	r18, 0x86	; 134
 7fc:	23 0f       	add	r18, r19
 7fe:	02 96       	adiw	r24, 0x02	; 2
 800:	a1 1d       	adc	r26, r1
 802:	b1 1d       	adc	r27, r1
 804:	20 93 35 01 	sts	0x0135, r18	; 0x800135 <timer0_fract>
 808:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timer0_millis>
 80c:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timer0_millis+0x1>
 810:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timer0_millis+0x2>
 814:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timer0_millis+0x3>
 818:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <timer0_overflow_count>
 81c:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <timer0_overflow_count+0x1>
 820:	a0 91 3c 01 	lds	r26, 0x013C	; 0x80013c <timer0_overflow_count+0x2>
 824:	b0 91 3d 01 	lds	r27, 0x013D	; 0x80013d <timer0_overflow_count+0x3>
 828:	01 96       	adiw	r24, 0x01	; 1
 82a:	a1 1d       	adc	r26, r1
 82c:	b1 1d       	adc	r27, r1
 82e:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timer0_overflow_count>
 832:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timer0_overflow_count+0x1>
 836:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timer0_overflow_count+0x2>
 83a:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timer0_overflow_count+0x3>
 83e:	bf 91       	pop	r27
 840:	af 91       	pop	r26
 842:	9f 91       	pop	r25
 844:	8f 91       	pop	r24
 846:	3f 91       	pop	r19
 848:	2f 91       	pop	r18
 84a:	0f 90       	pop	r0
 84c:	0f be       	out	0x3f, r0	; 63
 84e:	0f 90       	pop	r0
 850:	1f 90       	pop	r1
 852:	18 95       	reti

00000854 <micros>:
 854:	3f b7       	in	r19, 0x3f	; 63
 856:	f8 94       	cli
 858:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <timer0_overflow_count>
 85c:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <timer0_overflow_count+0x1>
 860:	a0 91 3c 01 	lds	r26, 0x013C	; 0x80013c <timer0_overflow_count+0x2>
 864:	b0 91 3d 01 	lds	r27, 0x013D	; 0x80013d <timer0_overflow_count+0x3>
 868:	26 b5       	in	r18, 0x26	; 38
 86a:	a8 9b       	sbis	0x15, 0	; 21
 86c:	05 c0       	rjmp	.+10     	; 0x878 <micros+0x24>
 86e:	2f 3f       	cpi	r18, 0xFF	; 255
 870:	19 f0       	breq	.+6      	; 0x878 <micros+0x24>
 872:	01 96       	adiw	r24, 0x01	; 1
 874:	a1 1d       	adc	r26, r1
 876:	b1 1d       	adc	r27, r1
 878:	3f bf       	out	0x3f, r19	; 63
 87a:	ba 2f       	mov	r27, r26
 87c:	a9 2f       	mov	r26, r25
 87e:	98 2f       	mov	r25, r24
 880:	88 27       	eor	r24, r24
 882:	82 0f       	add	r24, r18
 884:	91 1d       	adc	r25, r1
 886:	a1 1d       	adc	r26, r1
 888:	b1 1d       	adc	r27, r1
 88a:	bc 01       	movw	r22, r24
 88c:	cd 01       	movw	r24, r26
 88e:	42 e0       	ldi	r20, 0x02	; 2
 890:	66 0f       	add	r22, r22
 892:	77 1f       	adc	r23, r23
 894:	88 1f       	adc	r24, r24
 896:	99 1f       	adc	r25, r25
 898:	4a 95       	dec	r20
 89a:	d1 f7       	brne	.-12     	; 0x890 <micros+0x3c>
 89c:	08 95       	ret

0000089e <delay>:
 89e:	8f 92       	push	r8
 8a0:	9f 92       	push	r9
 8a2:	af 92       	push	r10
 8a4:	bf 92       	push	r11
 8a6:	cf 92       	push	r12
 8a8:	df 92       	push	r13
 8aa:	ef 92       	push	r14
 8ac:	ff 92       	push	r15
 8ae:	6b 01       	movw	r12, r22
 8b0:	7c 01       	movw	r14, r24
 8b2:	0e 94 2a 04 	call	0x854	; 0x854 <micros>
 8b6:	4b 01       	movw	r8, r22
 8b8:	5c 01       	movw	r10, r24
 8ba:	c1 14       	cp	r12, r1
 8bc:	d1 04       	cpc	r13, r1
 8be:	e1 04       	cpc	r14, r1
 8c0:	f1 04       	cpc	r15, r1
 8c2:	01 f1       	breq	.+64     	; 0x904 <__stack+0x5>
 8c4:	0e 94 5a 05 	call	0xab4	; 0xab4 <yield>
 8c8:	0e 94 2a 04 	call	0x854	; 0x854 <micros>
 8cc:	dc 01       	movw	r26, r24
 8ce:	cb 01       	movw	r24, r22
 8d0:	88 19       	sub	r24, r8
 8d2:	99 09       	sbc	r25, r9
 8d4:	aa 09       	sbc	r26, r10
 8d6:	bb 09       	sbc	r27, r11
 8d8:	88 3e       	cpi	r24, 0xE8	; 232
 8da:	93 40       	sbci	r25, 0x03	; 3
 8dc:	a1 05       	cpc	r26, r1
 8de:	b1 05       	cpc	r27, r1
 8e0:	60 f3       	brcs	.-40     	; 0x8ba <delay+0x1c>
 8e2:	21 e0       	ldi	r18, 0x01	; 1
 8e4:	c2 1a       	sub	r12, r18
 8e6:	d1 08       	sbc	r13, r1
 8e8:	e1 08       	sbc	r14, r1
 8ea:	f1 08       	sbc	r15, r1
 8ec:	88 ee       	ldi	r24, 0xE8	; 232
 8ee:	88 0e       	add	r8, r24
 8f0:	83 e0       	ldi	r24, 0x03	; 3
 8f2:	98 1e       	adc	r9, r24
 8f4:	a1 1c       	adc	r10, r1
 8f6:	b1 1c       	adc	r11, r1
 8f8:	c1 14       	cp	r12, r1
 8fa:	d1 04       	cpc	r13, r1
 8fc:	e1 04       	cpc	r14, r1
 8fe:	f1 04       	cpc	r15, r1
 900:	19 f7       	brne	.-58     	; 0x8c8 <delay+0x2a>
 902:	db cf       	rjmp	.-74     	; 0x8ba <delay+0x1c>
 904:	ff 90       	pop	r15
 906:	ef 90       	pop	r14
 908:	df 90       	pop	r13
 90a:	cf 90       	pop	r12
 90c:	bf 90       	pop	r11
 90e:	af 90       	pop	r10
 910:	9f 90       	pop	r9
 912:	8f 90       	pop	r8
 914:	08 95       	ret

00000916 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 916:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 918:	84 b5       	in	r24, 0x24	; 36
 91a:	82 60       	ori	r24, 0x02	; 2
 91c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 91e:	84 b5       	in	r24, 0x24	; 36
 920:	81 60       	ori	r24, 0x01	; 1
 922:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 924:	85 b5       	in	r24, 0x25	; 37
 926:	82 60       	ori	r24, 0x02	; 2
 928:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 92a:	85 b5       	in	r24, 0x25	; 37
 92c:	81 60       	ori	r24, 0x01	; 1
 92e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 930:	ee e6       	ldi	r30, 0x6E	; 110
 932:	f0 e0       	ldi	r31, 0x00	; 0
 934:	80 81       	ld	r24, Z
 936:	81 60       	ori	r24, 0x01	; 1
 938:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 93a:	e1 e8       	ldi	r30, 0x81	; 129
 93c:	f0 e0       	ldi	r31, 0x00	; 0
 93e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 940:	80 81       	ld	r24, Z
 942:	82 60       	ori	r24, 0x02	; 2
 944:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 946:	80 81       	ld	r24, Z
 948:	81 60       	ori	r24, 0x01	; 1
 94a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 94c:	e0 e8       	ldi	r30, 0x80	; 128
 94e:	f0 e0       	ldi	r31, 0x00	; 0
 950:	80 81       	ld	r24, Z
 952:	81 60       	ori	r24, 0x01	; 1
 954:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 956:	e1 eb       	ldi	r30, 0xB1	; 177
 958:	f0 e0       	ldi	r31, 0x00	; 0
 95a:	80 81       	ld	r24, Z
 95c:	84 60       	ori	r24, 0x04	; 4
 95e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 960:	e0 eb       	ldi	r30, 0xB0	; 176
 962:	f0 e0       	ldi	r31, 0x00	; 0
 964:	80 81       	ld	r24, Z
 966:	81 60       	ori	r24, 0x01	; 1
 968:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 96a:	ea e7       	ldi	r30, 0x7A	; 122
 96c:	f0 e0       	ldi	r31, 0x00	; 0
 96e:	80 81       	ld	r24, Z
 970:	84 60       	ori	r24, 0x04	; 4
 972:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 974:	80 81       	ld	r24, Z
 976:	82 60       	ori	r24, 0x02	; 2
 978:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 97a:	80 81       	ld	r24, Z
 97c:	81 60       	ori	r24, 0x01	; 1
 97e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 980:	80 81       	ld	r24, Z
 982:	80 68       	ori	r24, 0x80	; 128
 984:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 986:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 98a:	08 95       	ret

0000098c <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 98c:	83 30       	cpi	r24, 0x03	; 3
 98e:	81 f0       	breq	.+32     	; 0x9b0 <turnOffPWM+0x24>
 990:	28 f4       	brcc	.+10     	; 0x99c <turnOffPWM+0x10>
 992:	81 30       	cpi	r24, 0x01	; 1
 994:	99 f0       	breq	.+38     	; 0x9bc <turnOffPWM+0x30>
 996:	82 30       	cpi	r24, 0x02	; 2
 998:	a1 f0       	breq	.+40     	; 0x9c2 <turnOffPWM+0x36>
 99a:	08 95       	ret
 99c:	87 30       	cpi	r24, 0x07	; 7
 99e:	a9 f0       	breq	.+42     	; 0x9ca <turnOffPWM+0x3e>
 9a0:	88 30       	cpi	r24, 0x08	; 8
 9a2:	b9 f0       	breq	.+46     	; 0x9d2 <turnOffPWM+0x46>
 9a4:	84 30       	cpi	r24, 0x04	; 4
 9a6:	d1 f4       	brne	.+52     	; 0x9dc <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 9a8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 9ac:	8f 7d       	andi	r24, 0xDF	; 223
 9ae:	03 c0       	rjmp	.+6      	; 0x9b6 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 9b0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 9b4:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 9b6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 9ba:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 9bc:	84 b5       	in	r24, 0x24	; 36
 9be:	8f 77       	andi	r24, 0x7F	; 127
 9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 9c2:	84 b5       	in	r24, 0x24	; 36
 9c4:	8f 7d       	andi	r24, 0xDF	; 223
 9c6:	84 bd       	out	0x24, r24	; 36
 9c8:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 9ca:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 9ce:	8f 77       	andi	r24, 0x7F	; 127
 9d0:	03 c0       	rjmp	.+6      	; 0x9d8 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 9d2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 9d6:	8f 7d       	andi	r24, 0xDF	; 223
 9d8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 9dc:	08 95       	ret

000009de <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 9de:	cf 93       	push	r28
 9e0:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	fc 01       	movw	r30, r24
 9e6:	e4 58       	subi	r30, 0x84	; 132
 9e8:	ff 4f       	sbci	r31, 0xFF	; 255
 9ea:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 9ec:	fc 01       	movw	r30, r24
 9ee:	e0 57       	subi	r30, 0x70	; 112
 9f0:	ff 4f       	sbci	r31, 0xFF	; 255
 9f2:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 9f4:	88 23       	and	r24, r24
 9f6:	61 f1       	breq	.+88     	; 0xa50 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	88 0f       	add	r24, r24
 9fc:	99 1f       	adc	r25, r25
 9fe:	fc 01       	movw	r30, r24
 a00:	e2 55       	subi	r30, 0x52	; 82
 a02:	ff 4f       	sbci	r31, 0xFF	; 255
 a04:	c5 91       	lpm	r28, Z+
 a06:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 a08:	fc 01       	movw	r30, r24
 a0a:	ec 55       	subi	r30, 0x5C	; 92
 a0c:	ff 4f       	sbci	r31, 0xFF	; 255
 a0e:	a5 91       	lpm	r26, Z+
 a10:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 a12:	61 11       	cpse	r22, r1
 a14:	09 c0       	rjmp	.+18     	; 0xa28 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 a16:	9f b7       	in	r25, 0x3f	; 63
                cli();
 a18:	f8 94       	cli
		*reg &= ~bit;
 a1a:	88 81       	ld	r24, Y
 a1c:	20 95       	com	r18
 a1e:	82 23       	and	r24, r18
 a20:	88 83       	st	Y, r24
		*out &= ~bit;
 a22:	ec 91       	ld	r30, X
 a24:	2e 23       	and	r18, r30
 a26:	0b c0       	rjmp	.+22     	; 0xa3e <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 a28:	62 30       	cpi	r22, 0x02	; 2
 a2a:	61 f4       	brne	.+24     	; 0xa44 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 a2c:	9f b7       	in	r25, 0x3f	; 63
                cli();
 a2e:	f8 94       	cli
		*reg &= ~bit;
 a30:	88 81       	ld	r24, Y
 a32:	32 2f       	mov	r19, r18
 a34:	30 95       	com	r19
 a36:	83 23       	and	r24, r19
 a38:	88 83       	st	Y, r24
		*out |= bit;
 a3a:	ec 91       	ld	r30, X
 a3c:	2e 2b       	or	r18, r30
 a3e:	2c 93       	st	X, r18
		SREG = oldSREG;
 a40:	9f bf       	out	0x3f, r25	; 63
 a42:	06 c0       	rjmp	.+12     	; 0xa50 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 a44:	8f b7       	in	r24, 0x3f	; 63
                cli();
 a46:	f8 94       	cli
		*reg |= bit;
 a48:	e8 81       	ld	r30, Y
 a4a:	2e 2b       	or	r18, r30
 a4c:	28 83       	st	Y, r18
		SREG = oldSREG;
 a4e:	8f bf       	out	0x3f, r24	; 63
	}
}
 a50:	df 91       	pop	r29
 a52:	cf 91       	pop	r28
 a54:	08 95       	ret

00000a56 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 a56:	1f 93       	push	r17
 a58:	cf 93       	push	r28
 a5a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 a5c:	28 2f       	mov	r18, r24
 a5e:	30 e0       	ldi	r19, 0x00	; 0
 a60:	f9 01       	movw	r30, r18
 a62:	e8 59       	subi	r30, 0x98	; 152
 a64:	ff 4f       	sbci	r31, 0xFF	; 255
 a66:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 a68:	f9 01       	movw	r30, r18
 a6a:	e4 58       	subi	r30, 0x84	; 132
 a6c:	ff 4f       	sbci	r31, 0xFF	; 255
 a6e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 a70:	f9 01       	movw	r30, r18
 a72:	e0 57       	subi	r30, 0x70	; 112
 a74:	ff 4f       	sbci	r31, 0xFF	; 255
 a76:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 a78:	cc 23       	and	r28, r28
 a7a:	c1 f0       	breq	.+48     	; 0xaac <digitalWrite+0x56>
 a7c:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 a7e:	81 11       	cpse	r24, r1
 a80:	0e 94 c6 04 	call	0x98c	; 0x98c <turnOffPWM>

	out = portOutputRegister(port);
 a84:	ec 2f       	mov	r30, r28
 a86:	f0 e0       	ldi	r31, 0x00	; 0
 a88:	ee 0f       	add	r30, r30
 a8a:	ff 1f       	adc	r31, r31
 a8c:	ec 55       	subi	r30, 0x5C	; 92
 a8e:	ff 4f       	sbci	r31, 0xFF	; 255
 a90:	a5 91       	lpm	r26, Z+
 a92:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 a94:	9f b7       	in	r25, 0x3f	; 63
	cli();
 a96:	f8 94       	cli

	if (val == LOW) {
 a98:	11 11       	cpse	r17, r1
 a9a:	04 c0       	rjmp	.+8      	; 0xaa4 <digitalWrite+0x4e>
		*out &= ~bit;
 a9c:	8c 91       	ld	r24, X
 a9e:	d0 95       	com	r29
 aa0:	d8 23       	and	r29, r24
 aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <digitalWrite+0x52>
	} else {
		*out |= bit;
 aa4:	ec 91       	ld	r30, X
 aa6:	de 2b       	or	r29, r30
 aa8:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 aaa:	9f bf       	out	0x3f, r25	; 63
}
 aac:	df 91       	pop	r29
 aae:	cf 91       	pop	r28
 ab0:	1f 91       	pop	r17
 ab2:	08 95       	ret

00000ab4 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 ab4:	08 95       	ret

00000ab6 <__divmodhi4>:
 ab6:	97 fb       	bst	r25, 7
 ab8:	07 2e       	mov	r0, r23
 aba:	16 f4       	brtc	.+4      	; 0xac0 <__divmodhi4+0xa>
 abc:	00 94       	com	r0
 abe:	07 d0       	rcall	.+14     	; 0xace <__divmodhi4_neg1>
 ac0:	77 fd       	sbrc	r23, 7
 ac2:	09 d0       	rcall	.+18     	; 0xad6 <__divmodhi4_neg2>
 ac4:	0e 94 6f 05 	call	0xade	; 0xade <__udivmodhi4>
 ac8:	07 fc       	sbrc	r0, 7
 aca:	05 d0       	rcall	.+10     	; 0xad6 <__divmodhi4_neg2>
 acc:	3e f4       	brtc	.+14     	; 0xadc <__divmodhi4_exit>

00000ace <__divmodhi4_neg1>:
 ace:	90 95       	com	r25
 ad0:	81 95       	neg	r24
 ad2:	9f 4f       	sbci	r25, 0xFF	; 255
 ad4:	08 95       	ret

00000ad6 <__divmodhi4_neg2>:
 ad6:	70 95       	com	r23
 ad8:	61 95       	neg	r22
 ada:	7f 4f       	sbci	r23, 0xFF	; 255

00000adc <__divmodhi4_exit>:
 adc:	08 95       	ret

00000ade <__udivmodhi4>:
 ade:	aa 1b       	sub	r26, r26
 ae0:	bb 1b       	sub	r27, r27
 ae2:	51 e1       	ldi	r21, 0x11	; 17
 ae4:	07 c0       	rjmp	.+14     	; 0xaf4 <__udivmodhi4_ep>

00000ae6 <__udivmodhi4_loop>:
 ae6:	aa 1f       	adc	r26, r26
 ae8:	bb 1f       	adc	r27, r27
 aea:	a6 17       	cp	r26, r22
 aec:	b7 07       	cpc	r27, r23
 aee:	10 f0       	brcs	.+4      	; 0xaf4 <__udivmodhi4_ep>
 af0:	a6 1b       	sub	r26, r22
 af2:	b7 0b       	sbc	r27, r23

00000af4 <__udivmodhi4_ep>:
 af4:	88 1f       	adc	r24, r24
 af6:	99 1f       	adc	r25, r25
 af8:	5a 95       	dec	r21
 afa:	a9 f7       	brne	.-22     	; 0xae6 <__udivmodhi4_loop>
 afc:	80 95       	com	r24
 afe:	90 95       	com	r25
 b00:	bc 01       	movw	r22, r24
 b02:	cd 01       	movw	r24, r26
 b04:	08 95       	ret

00000b06 <_exit>:
 b06:	f8 94       	cli

00000b08 <__stop_program>:
 b08:	ff cf       	rjmp	.-2      	; 0xb08 <__stop_program>
