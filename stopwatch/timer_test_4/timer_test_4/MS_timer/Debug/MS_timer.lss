
MS_timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000c3e  00000cd2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002d  0080011e  0080011e  00000cf0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f8f  00000000  00000000  00000ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d5c  00000000  00000000  00002e7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001135  00000000  00000000  00003bdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d4  00000000  00000000  00004d10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009e0  00000000  00000000  000050e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d6f  00000000  00000000  00005ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00006833  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__ctors_end>
   4:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__vector_1>
   8:	0c 94 86 03 	jmp	0x70c	; 0x70c <__vector_2>
   c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  10:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  14:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  18:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  1c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  20:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  24:	0c 94 ca 05 	jmp	0xb94	; 0xb94 <__vector_9>
  28:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  2c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  30:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  34:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  38:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  3c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  40:	0c 94 ad 03 	jmp	0x75a	; 0x75a <__vector_16>
  44:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  48:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  4c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  50:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  54:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  58:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  5c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  60:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  64:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_end>:
  b8:	11 24       	eor	r1, r1
  ba:	1f be       	out	0x3f, r1	; 63
  bc:	cf ef       	ldi	r28, 0xFF	; 255
  be:	d8 e0       	ldi	r29, 0x08	; 8
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_copy_data>:
  c4:	11 e0       	ldi	r17, 0x01	; 1
  c6:	a0 e0       	ldi	r26, 0x00	; 0
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	ee e3       	ldi	r30, 0x3E	; 62
  cc:	fc e0       	ldi	r31, 0x0C	; 12
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <__do_copy_data+0x10>
  d0:	05 90       	lpm	r0, Z+
  d2:	0d 92       	st	X+, r0
  d4:	ae 31       	cpi	r26, 0x1E	; 30
  d6:	b1 07       	cpc	r27, r17
  d8:	d9 f7       	brne	.-10     	; 0xd0 <__do_copy_data+0xc>

000000da <__do_clear_bss>:
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	ae e1       	ldi	r26, 0x1E	; 30
  de:	b1 e0       	ldi	r27, 0x01	; 1
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <.do_clear_bss_start>

000000e2 <.do_clear_bss_loop>:
  e2:	1d 92       	st	X+, r1

000000e4 <.do_clear_bss_start>:
  e4:	ab 34       	cpi	r26, 0x4B	; 75
  e6:	b2 07       	cpc	r27, r18
  e8:	e1 f7       	brne	.-8      	; 0xe2 <.do_clear_bss_loop>
  ea:	0e 94 2f 03 	call	0x65e	; 0x65e <main>
  ee:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <_exit>

000000f2 <__bad_interrupt>:
  f2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f6 <_Z11stateChangev>:
  delay(timedelay);
}

void stateChange()
{
  state =! state;
  f6:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <__data_end>
  fa:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <__data_end+0x1>
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	23 2b       	or	r18, r19
 104:	11 f0       	breq	.+4      	; 0x10a <_Z11stateChangev+0x14>
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <__data_end+0x1>
 10e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
 112:	08 95       	ret

00000114 <_Z5flashv>:

void disp(int num, int digit);

void flash() {
  
 if (state == LOW)
 114:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
 118:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
 11c:	89 2b       	or	r24, r25
 11e:	09 f0       	breq	.+2      	; 0x122 <_Z5flashv+0xe>
 120:	72 c0       	rjmp	.+228    	; 0x206 <_Z5flashv+0xf2>
 {
  huns = i%10;
 122:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <i>
 126:	30 91 32 01 	lds	r19, 0x0132	; 0x800132 <i+0x1>
 12a:	c9 01       	movw	r24, r18
 12c:	6a e0       	ldi	r22, 0x0A	; 10
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	0e 94 f5 05 	call	0xbea	; 0xbea <__divmodhi4>
 134:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <huns+0x1>
 138:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <huns>
  //HUNS = huns;
  i++;
 13c:	2f 5f       	subi	r18, 0xFF	; 255
 13e:	3f 4f       	sbci	r19, 0xFF	; 255
 140:	30 93 32 01 	sts	0x0132, r19	; 0x800132 <i+0x1>
 144:	20 93 31 01 	sts	0x0131, r18	; 0x800131 <i>
  c1 = i>0?true:false;
 148:	41 e0       	ldi	r20, 0x01	; 1
 14a:	12 16       	cp	r1, r18
 14c:	13 06       	cpc	r1, r19
 14e:	0c f0       	brlt	.+2      	; 0x152 <_Z5flashv+0x3e>
 150:	40 e0       	ldi	r20, 0x00	; 0
 152:	40 93 2a 01 	sts	0x012A, r20	; 0x80012a <c1>
  if (huns == 0 && c1 == true)
 156:	89 2b       	or	r24, r25
 158:	09 f0       	breq	.+2      	; 0x15c <_Z5flashv+0x48>
 15a:	55 c0       	rjmp	.+170    	; 0x206 <_Z5flashv+0xf2>
 15c:	12 16       	cp	r1, r18
 15e:	13 06       	cpc	r1, r19
 160:	0c f0       	brlt	.+2      	; 0x164 <_Z5flashv+0x50>
 162:	51 c0       	rjmp	.+162    	; 0x206 <_Z5flashv+0xf2>
  {
      c1 = true ;
     tens = j%10;
 164:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <j>
 168:	30 91 30 01 	lds	r19, 0x0130	; 0x800130 <j+0x1>
 16c:	c9 01       	movw	r24, r18
 16e:	6a e0       	ldi	r22, 0x0A	; 10
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	0e 94 f5 05 	call	0xbea	; 0xbea <__divmodhi4>
 176:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <tens+0x1>
 17a:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <tens>
     j++;
 17e:	2f 5f       	subi	r18, 0xFF	; 255
 180:	3f 4f       	sbci	r19, 0xFF	; 255
 182:	30 93 30 01 	sts	0x0130, r19	; 0x800130 <j+0x1>
 186:	20 93 2f 01 	sts	0x012F, r18	; 0x80012f <j>
     c2 = j>0?true:false;
 18a:	41 e0       	ldi	r20, 0x01	; 1
 18c:	12 16       	cp	r1, r18
 18e:	13 06       	cpc	r1, r19
 190:	0c f0       	brlt	.+2      	; 0x194 <_Z5flashv+0x80>
 192:	40 e0       	ldi	r20, 0x00	; 0
 194:	40 93 29 01 	sts	0x0129, r20	; 0x800129 <c2>
     if (tens == 0 && c2 == true)
 198:	89 2b       	or	r24, r25
 19a:	a9 f5       	brne	.+106    	; 0x206 <_Z5flashv+0xf2>
 19c:	12 16       	cp	r1, r18
 19e:	13 06       	cpc	r1, r19
 1a0:	94 f5       	brge	.+100    	; 0x206 <_Z5flashv+0xf2>
     {
      c2 = true;
       twos = k%10;
 1a2:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <k>
 1a6:	30 91 2e 01 	lds	r19, 0x012E	; 0x80012e <k+0x1>
 1aa:	c9 01       	movw	r24, r18
 1ac:	6a e0       	ldi	r22, 0x0A	; 10
 1ae:	70 e0       	ldi	r23, 0x00	; 0
 1b0:	0e 94 f5 05 	call	0xbea	; 0xbea <__divmodhi4>
 1b4:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <twos+0x1>
 1b8:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <twos>
       k++;
 1bc:	2f 5f       	subi	r18, 0xFF	; 255
 1be:	3f 4f       	sbci	r19, 0xFF	; 255
 1c0:	30 93 2e 01 	sts	0x012E, r19	; 0x80012e <k+0x1>
 1c4:	20 93 2d 01 	sts	0x012D, r18	; 0x80012d <k>
       c3 = k>0?true:false;
 1c8:	41 e0       	ldi	r20, 0x01	; 1
 1ca:	12 16       	cp	r1, r18
 1cc:	13 06       	cpc	r1, r19
 1ce:	0c f0       	brlt	.+2      	; 0x1d2 <_Z5flashv+0xbe>
 1d0:	40 e0       	ldi	r20, 0x00	; 0
 1d2:	40 93 28 01 	sts	0x0128, r20	; 0x800128 <c3>
       if (twos == 0 && c3 == true)
 1d6:	89 2b       	or	r24, r25
 1d8:	b1 f4       	brne	.+44     	; 0x206 <_Z5flashv+0xf2>
 1da:	12 16       	cp	r1, r18
 1dc:	13 06       	cpc	r1, r19
 1de:	9c f4       	brge	.+38     	; 0x206 <_Z5flashv+0xf2>
       {
          c3 = true;
          ones = l%10;
 1e0:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <l>
 1e4:	30 91 2c 01 	lds	r19, 0x012C	; 0x80012c <l+0x1>
 1e8:	c9 01       	movw	r24, r18
 1ea:	6a e0       	ldi	r22, 0x0A	; 10
 1ec:	70 e0       	ldi	r23, 0x00	; 0
 1ee:	0e 94 f5 05 	call	0xbea	; 0xbea <__divmodhi4>
 1f2:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <ones+0x1>
 1f6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <ones>
          l++;
 1fa:	2f 5f       	subi	r18, 0xFF	; 255
 1fc:	3f 4f       	sbci	r19, 0xFF	; 255
 1fe:	30 93 2c 01 	sts	0x012C, r19	; 0x80012c <l+0x1>
 202:	20 93 2b 01 	sts	0x012B, r18	; 0x80012b <l>
 206:	08 95       	ret

00000208 <setup>:
  

void setup() {
  //Serial.begin(9600); 
  
  pinMode(pinA, OUTPUT);
 208:	61 e0       	ldi	r22, 0x01	; 1
 20a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <pinA>
 20e:	0e 94 bc 04 	call	0x978	; 0x978 <pinMode>
  pinMode(pinB, OUTPUT);
 212:	61 e0       	ldi	r22, 0x01	; 1
 214:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <pinB>
 218:	0e 94 bc 04 	call	0x978	; 0x978 <pinMode>
  pinMode(pinC, OUTPUT);
 21c:	61 e0       	ldi	r22, 0x01	; 1
 21e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <pinC>
 222:	0e 94 bc 04 	call	0x978	; 0x978 <pinMode>
  pinMode(pinD, OUTPUT);
 226:	61 e0       	ldi	r22, 0x01	; 1
 228:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <pinD>
 22c:	0e 94 bc 04 	call	0x978	; 0x978 <pinMode>
  pinMode(pinE, OUTPUT);
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <pinE>
 236:	0e 94 bc 04 	call	0x978	; 0x978 <pinMode>
  pinMode(pinF, OUTPUT);
 23a:	61 e0       	ldi	r22, 0x01	; 1
 23c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pinF>
 240:	0e 94 bc 04 	call	0x978	; 0x978 <pinMode>
  pinMode(pinG, OUTPUT);
 244:	61 e0       	ldi	r22, 0x01	; 1
 246:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pinG>
 24a:	0e 94 bc 04 	call	0x978	; 0x978 <pinMode>

  pinMode(pinDecimal, OUTPUT);
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <pinDecimal>
 254:	0e 94 bc 04 	call	0x978	; 0x978 <pinMode>

  pinMode(pinD1, OUTPUT);
 258:	61 e0       	ldi	r22, 0x01	; 1
 25a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <pinD1>
 25e:	0e 94 bc 04 	call	0x978	; 0x978 <pinMode>
  pinMode(pinD2, OUTPUT);
 262:	61 e0       	ldi	r22, 0x01	; 1
 264:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pinD2>
 268:	0e 94 bc 04 	call	0x978	; 0x978 <pinMode>
  pinMode(pinD3, OUTPUT);
 26c:	61 e0       	ldi	r22, 0x01	; 1
 26e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pinD3>
 272:	0e 94 bc 04 	call	0x978	; 0x978 <pinMode>
  pinMode(pinD4, OUTPUT);
 276:	61 e0       	ldi	r22, 0x01	; 1
 278:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pinD4>
 27c:	0e 94 bc 04 	call	0x978	; 0x978 <pinMode>

  pinMode(pbIn, INPUT_PULLUP);
 280:	62 e0       	ldi	r22, 0x02	; 2
 282:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 286:	0e 94 bc 04 	call	0x978	; 0x978 <pinMode>
  attachInterrupt(digitalPinToInterrupt(pbIn), stateChange, RISING);
 28a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 28e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 292:	82 30       	cpi	r24, 0x02	; 2
 294:	91 05       	cpc	r25, r1
 296:	21 f0       	breq	.+8      	; 0x2a0 <setup+0x98>
 298:	03 97       	sbiw	r24, 0x03	; 3
 29a:	21 f0       	breq	.+8      	; 0x2a4 <setup+0x9c>
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	03 c0       	rjmp	.+6      	; 0x2a6 <setup+0x9e>
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <setup+0x9e>
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	43 e0       	ldi	r20, 0x03	; 3
 2a8:	50 e0       	ldi	r21, 0x00	; 0
 2aa:	6b e7       	ldi	r22, 0x7B	; 123
 2ac:	70 e0       	ldi	r23, 0x00	; 0
 2ae:	0e 94 3f 03 	call	0x67e	; 0x67e <attachInterrupt>

  MsTimer2::set(10, flash); // 500ms period
 2b2:	4a e8       	ldi	r20, 0x8A	; 138
 2b4:	50 e0       	ldi	r21, 0x00	; 0
 2b6:	6a e0       	ldi	r22, 0x0A	; 10
 2b8:	70 e0       	ldi	r23, 0x00	; 0
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 27 05 	call	0xa4e	; 0xa4e <_ZN8MsTimer23setEmPFvvE>
  MsTimer2::start();
 2c2:	0c 94 75 05 	jmp	0xaea	; 0xaea <_ZN8MsTimer25startEv>

000002c6 <_Z4dispii>:
  state =! state;
}


void disp(int num, int digit)
{
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	ec 01       	movw	r28, r24

 // turnOff();
  if (digit == 1)
 2cc:	61 30       	cpi	r22, 0x01	; 1
 2ce:	71 05       	cpc	r23, r1
 2d0:	39 f4       	brne	.+14     	; 0x2e0 <_Z4dispii+0x1a>
  {
    digitalWrite(pinD1, LOW); 
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <pinD1>
 2d8:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
    digitalWrite(pinD2, HIGH);
 2dc:	61 e0       	ldi	r22, 0x01	; 1
 2de:	09 c0       	rjmp	.+18     	; 0x2f2 <_Z4dispii+0x2c>
    digitalWrite(pinD3, HIGH);
    digitalWrite(pinD4, HIGH);
  }
  else if (digit == 2)
 2e0:	62 30       	cpi	r22, 0x02	; 2
 2e2:	71 05       	cpc	r23, r1
 2e4:	61 f4       	brne	.+24     	; 0x2fe <_Z4dispii+0x38>
  {
    digitalWrite(pinD1, HIGH); 
 2e6:	61 e0       	ldi	r22, 0x01	; 1
 2e8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <pinD1>
 2ec:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
    digitalWrite(pinD2, LOW);
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pinD2>
 2f6:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
    digitalWrite(pinD3, HIGH);
 2fa:	61 e0       	ldi	r22, 0x01	; 1
 2fc:	0e c0       	rjmp	.+28     	; 0x31a <_Z4dispii+0x54>
    digitalWrite(pinD4, HIGH);
  }
  else if (digit == 3)
 2fe:	63 30       	cpi	r22, 0x03	; 3
 300:	71 05       	cpc	r23, r1
 302:	89 f4       	brne	.+34     	; 0x326 <_Z4dispii+0x60>
  {
    digitalWrite(pinD1, HIGH); 
 304:	61 e0       	ldi	r22, 0x01	; 1
 306:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <pinD1>
 30a:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
    digitalWrite(pinD2, HIGH);
 30e:	61 e0       	ldi	r22, 0x01	; 1
 310:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pinD2>
 314:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
    digitalWrite(pinD3, LOW);
 318:	60 e0       	ldi	r22, 0x00	; 0
 31a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pinD3>
 31e:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
    digitalWrite(pinD4, HIGH);
 322:	61 e0       	ldi	r22, 0x01	; 1
 324:	13 c0       	rjmp	.+38     	; 0x34c <_Z4dispii+0x86>
  }
  else if (digit == 4)
 326:	64 30       	cpi	r22, 0x04	; 4
 328:	71 05       	cpc	r23, r1
 32a:	a1 f4       	brne	.+40     	; 0x354 <_Z4dispii+0x8e>
  {
    digitalWrite(pinD1, HIGH); 
 32c:	61 e0       	ldi	r22, 0x01	; 1
 32e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <pinD1>
 332:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
    digitalWrite(pinD2, HIGH);
 336:	61 e0       	ldi	r22, 0x01	; 1
 338:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pinD2>
 33c:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
    digitalWrite(pinD3, HIGH);
 340:	61 e0       	ldi	r22, 0x01	; 1
 342:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pinD3>
 346:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
    digitalWrite(pinD4, LOW);
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pinD4>
 350:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
  }

  

    if (num == 0)
 354:	20 97       	sbiw	r28, 0x00	; 0
 356:	d9 f4       	brne	.+54     	; 0x38e <_Z4dispii+0xc8>
    {
      digitalWrite(pinA, HIGH);
 358:	61 e0       	ldi	r22, 0x01	; 1
 35a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <pinA>
 35e:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinB, HIGH);
 362:	61 e0       	ldi	r22, 0x01	; 1
 364:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <pinB>
 368:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinC, HIGH);
 36c:	61 e0       	ldi	r22, 0x01	; 1
 36e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <pinC>
 372:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinD, HIGH);
 376:	61 e0       	ldi	r22, 0x01	; 1
 378:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <pinD>
 37c:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinE, HIGH);
 380:	61 e0       	ldi	r22, 0x01	; 1
 382:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <pinE>
 386:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinF, HIGH);
 38a:	61 e0       	ldi	r22, 0x01	; 1
 38c:	1d c0       	rjmp	.+58     	; 0x3c8 <_Z4dispii+0x102>
      digitalWrite(pinG, LOW);
    }
    else if (num == 1)
 38e:	c1 30       	cpi	r28, 0x01	; 1
 390:	d1 05       	cpc	r29, r1
 392:	01 f5       	brne	.+64     	; 0x3d4 <_Z4dispii+0x10e>
    {
      digitalWrite(pinA, LOW);
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <pinA>
 39a:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinB, HIGH);
 39e:	61 e0       	ldi	r22, 0x01	; 1
 3a0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <pinB>
 3a4:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinC, HIGH);
 3a8:	61 e0       	ldi	r22, 0x01	; 1
 3aa:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <pinC>
 3ae:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinD, LOW);
 3b2:	60 e0       	ldi	r22, 0x00	; 0
 3b4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <pinD>
 3b8:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinE, LOW);
 3bc:	60 e0       	ldi	r22, 0x00	; 0
 3be:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <pinE>
 3c2:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinF, LOW);
 3c6:	60 e0       	ldi	r22, 0x00	; 0
 3c8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pinF>
 3cc:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinG, LOW);
 3d0:	60 e0       	ldi	r22, 0x00	; 0
 3d2:	f1 c0       	rjmp	.+482    	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
    }
    else if (num == 2)
 3d4:	c2 30       	cpi	r28, 0x02	; 2
 3d6:	d1 05       	cpc	r29, r1
 3d8:	d9 f4       	brne	.+54     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
    {
      digitalWrite(pinA, HIGH);
 3da:	61 e0       	ldi	r22, 0x01	; 1
 3dc:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <pinA>
 3e0:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinB, HIGH);
 3e4:	61 e0       	ldi	r22, 0x01	; 1
 3e6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <pinB>
 3ea:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinC, LOW);
 3ee:	60 e0       	ldi	r22, 0x00	; 0
 3f0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <pinC>
 3f4:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinG, HIGH);
 3f8:	61 e0       	ldi	r22, 0x01	; 1
 3fa:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pinG>
 3fe:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinD, HIGH);
 402:	61 e0       	ldi	r22, 0x01	; 1
 404:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <pinD>
 408:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinE, HIGH);
 40c:	61 e0       	ldi	r22, 0x01	; 1
 40e:	1d c0       	rjmp	.+58     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
      digitalWrite(pinF, LOW);
    }
    else if (num == 3)
 410:	c3 30       	cpi	r28, 0x03	; 3
 412:	d1 05       	cpc	r29, r1
 414:	11 f5       	brne	.+68     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
    {
      digitalWrite(pinA, HIGH);
 416:	61 e0       	ldi	r22, 0x01	; 1
 418:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <pinA>
 41c:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinB, HIGH);
 420:	61 e0       	ldi	r22, 0x01	; 1
 422:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <pinB>
 426:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinG, HIGH);
 42a:	61 e0       	ldi	r22, 0x01	; 1
 42c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pinG>
 430:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinD, HIGH);
 434:	61 e0       	ldi	r22, 0x01	; 1
 436:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <pinD>
 43a:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinC, HIGH);
 43e:	61 e0       	ldi	r22, 0x01	; 1
 440:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <pinC>
 444:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinE, LOW);
 448:	60 e0       	ldi	r22, 0x00	; 0
 44a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <pinE>
 44e:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinF, LOW);
 452:	60 e0       	ldi	r22, 0x00	; 0
 454:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pinF>
 458:	b0 c0       	rjmp	.+352    	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
    }
    else if (num == 4)
 45a:	c4 30       	cpi	r28, 0x04	; 4
 45c:	d1 05       	cpc	r29, r1
 45e:	11 f5       	brne	.+68     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
    {
      digitalWrite(pinA, LOW);
 460:	60 e0       	ldi	r22, 0x00	; 0
 462:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <pinA>
 466:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinF, HIGH);
 46a:	61 e0       	ldi	r22, 0x01	; 1
 46c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pinF>
 470:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinB, HIGH);
 474:	61 e0       	ldi	r22, 0x01	; 1
 476:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <pinB>
 47a:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinG, HIGH);
 47e:	61 e0       	ldi	r22, 0x01	; 1
 480:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pinG>
 484:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinC, HIGH);
 488:	61 e0       	ldi	r22, 0x01	; 1
 48a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <pinC>
 48e:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinE, LOW);
 492:	60 e0       	ldi	r22, 0x00	; 0
 494:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <pinE>
 498:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinD, LOW);
 49c:	60 e0       	ldi	r22, 0x00	; 0
 49e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <pinD>
 4a2:	8b c0       	rjmp	.+278    	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
    }
    else if (num == 5)
 4a4:	c5 30       	cpi	r28, 0x05	; 5
 4a6:	d1 05       	cpc	r29, r1
 4a8:	11 f5       	brne	.+68     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
    {
      digitalWrite(pinA, HIGH);
 4aa:	61 e0       	ldi	r22, 0x01	; 1
 4ac:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <pinA>
 4b0:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinB, LOW);
 4b4:	60 e0       	ldi	r22, 0x00	; 0
 4b6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <pinB>
 4ba:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinF, HIGH);
 4be:	61 e0       	ldi	r22, 0x01	; 1
 4c0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pinF>
 4c4:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinG, HIGH);
 4c8:	61 e0       	ldi	r22, 0x01	; 1
 4ca:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pinG>
 4ce:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinD, HIGH);
 4d2:	61 e0       	ldi	r22, 0x01	; 1
 4d4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <pinD>
 4d8:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinC, HIGH);
 4dc:	61 e0       	ldi	r22, 0x01	; 1
 4de:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <pinC>
 4e2:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinE, LOW);
 4e6:	60 e0       	ldi	r22, 0x00	; 0
 4e8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <pinE>
 4ec:	66 c0       	rjmp	.+204    	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
    }
    else if (num == 6)
 4ee:	c6 30       	cpi	r28, 0x06	; 6
 4f0:	d1 05       	cpc	r29, r1
 4f2:	11 f5       	brne	.+68     	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
    {
      digitalWrite(pinA, HIGH);
 4f4:	61 e0       	ldi	r22, 0x01	; 1
 4f6:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <pinA>
 4fa:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinF, HIGH);
 4fe:	61 e0       	ldi	r22, 0x01	; 1
 500:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pinF>
 504:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinG, HIGH);
 508:	61 e0       	ldi	r22, 0x01	; 1
 50a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pinG>
 50e:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinD, HIGH);
 512:	61 e0       	ldi	r22, 0x01	; 1
 514:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <pinD>
 518:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinC, HIGH);
 51c:	61 e0       	ldi	r22, 0x01	; 1
 51e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <pinC>
 522:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinE, HIGH);
 526:	61 e0       	ldi	r22, 0x01	; 1
 528:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <pinE>
 52c:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinB, LOW);
 530:	60 e0       	ldi	r22, 0x00	; 0
 532:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <pinB>
 536:	41 c0       	rjmp	.+130    	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
    }
    else if (num == 7)
 538:	c7 30       	cpi	r28, 0x07	; 7
 53a:	d1 05       	cpc	r29, r1
 53c:	11 f4       	brne	.+4      	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
    {
      digitalWrite(pinA, HIGH);
 53e:	61 e0       	ldi	r22, 0x01	; 1
 540:	2a cf       	rjmp	.-428    	; 0x396 <_Z4dispii+0xd0>
      digitalWrite(pinD, LOW);
      digitalWrite(pinE, LOW);
      digitalWrite(pinF, LOW);
      digitalWrite(pinG, LOW);
    }
    else if (num == 8)
 542:	c8 30       	cpi	r28, 0x08	; 8
 544:	d1 05       	cpc	r29, r1
 546:	b1 f4       	brne	.+44     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
    {
      digitalWrite(pinA, HIGH);
 548:	61 e0       	ldi	r22, 0x01	; 1
 54a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <pinA>
 54e:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinB, HIGH);
 552:	61 e0       	ldi	r22, 0x01	; 1
 554:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <pinB>
 558:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinC, HIGH);
 55c:	61 e0       	ldi	r22, 0x01	; 1
 55e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <pinC>
 562:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinD, HIGH);
 566:	61 e0       	ldi	r22, 0x01	; 1
 568:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <pinD>
 56c:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinE, HIGH);
 570:	61 e0       	ldi	r22, 0x01	; 1
 572:	17 c0       	rjmp	.+46     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
      digitalWrite(pinF, HIGH);
      digitalWrite(pinG, HIGH);
    }
    else if (num == 9)
 574:	29 97       	sbiw	r28, 0x09	; 9
 576:	19 f5       	brne	.+70     	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
    {
      digitalWrite(pinA, HIGH);
 578:	61 e0       	ldi	r22, 0x01	; 1
 57a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <pinA>
 57e:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinB, HIGH);
 582:	61 e0       	ldi	r22, 0x01	; 1
 584:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <pinB>
 588:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinC, HIGH);
 58c:	61 e0       	ldi	r22, 0x01	; 1
 58e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <pinC>
 592:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinD, HIGH);
 596:	61 e0       	ldi	r22, 0x01	; 1
 598:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <pinD>
 59c:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinE, LOW);
 5a0:	60 e0       	ldi	r22, 0x00	; 0
 5a2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <pinE>
 5a6:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinF, HIGH);
 5aa:	61 e0       	ldi	r22, 0x01	; 1
 5ac:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pinF>
 5b0:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
      digitalWrite(pinG, HIGH);
 5b4:	61 e0       	ldi	r22, 0x01	; 1
 5b6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pinG>
 5ba:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <digitalWrite>
    }
    digitalWrite(pinDecimal,HIGH);
 5be:	61 e0       	ldi	r22, 0x01	; 1
 5c0:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <pinDecimal>
  }
 5c4:	df 91       	pop	r29
 5c6:	cf 91       	pop	r28
      digitalWrite(pinD, HIGH);
      digitalWrite(pinE, LOW);
      digitalWrite(pinF, HIGH);
      digitalWrite(pinG, HIGH);
    }
    digitalWrite(pinDecimal,HIGH);
 5c8:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <digitalWrite>

000005cc <loop>:
}

void loop() 
{
  //timedelay =(timedelay+HUNS)*4;
  disp(huns, 4);
 5cc:	64 e0       	ldi	r22, 0x04	; 4
 5ce:	70 e0       	ldi	r23, 0x00	; 0
 5d0:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <huns>
 5d4:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <huns+0x1>
 5d8:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z4dispii>
  delay(timedelay);
 5dc:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <timedelay>
 5e0:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <timedelay+0x1>
 5e4:	07 2e       	mov	r0, r23
 5e6:	00 0c       	add	r0, r0
 5e8:	88 0b       	sbc	r24, r24
 5ea:	99 0b       	sbc	r25, r25
 5ec:	0e 94 1c 04 	call	0x838	; 0x838 <delay>
  disp(tens, 3);
 5f0:	63 e0       	ldi	r22, 0x03	; 3
 5f2:	70 e0       	ldi	r23, 0x00	; 0
 5f4:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <tens>
 5f8:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <tens+0x1>
 5fc:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z4dispii>
  delay(timedelay);
 600:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <timedelay>
 604:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <timedelay+0x1>
 608:	07 2e       	mov	r0, r23
 60a:	00 0c       	add	r0, r0
 60c:	88 0b       	sbc	r24, r24
 60e:	99 0b       	sbc	r25, r25
 610:	0e 94 1c 04 	call	0x838	; 0x838 <delay>
  disp(twos, 2);
 614:	62 e0       	ldi	r22, 0x02	; 2
 616:	70 e0       	ldi	r23, 0x00	; 0
 618:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <twos>
 61c:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <twos+0x1>
 620:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z4dispii>
  delay(timedelay);
 624:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <timedelay>
 628:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <timedelay+0x1>
 62c:	07 2e       	mov	r0, r23
 62e:	00 0c       	add	r0, r0
 630:	88 0b       	sbc	r24, r24
 632:	99 0b       	sbc	r25, r25
 634:	0e 94 1c 04 	call	0x838	; 0x838 <delay>
  disp(ones, 1);
 638:	61 e0       	ldi	r22, 0x01	; 1
 63a:	70 e0       	ldi	r23, 0x00	; 0
 63c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <ones>
 640:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <ones+0x1>
 644:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z4dispii>
  delay(timedelay);
 648:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <timedelay>
 64c:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <timedelay+0x1>
 650:	07 2e       	mov	r0, r23
 652:	00 0c       	add	r0, r0
 654:	88 0b       	sbc	r24, r24
 656:	99 0b       	sbc	r25, r25
 658:	0c 94 1c 04 	jmp	0x838	; 0x838 <delay>

0000065c <initVariant>:
 65c:	08 95       	ret

0000065e <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 65e:	0e 94 58 04 	call	0x8b0	; 0x8b0 <init>

	initVariant();
 662:	0e 94 2e 03 	call	0x65c	; 0x65c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 666:	0e 94 04 01 	call	0x208	; 0x208 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 66a:	c0 e0       	ldi	r28, 0x00	; 0
 66c:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 66e:	0e 94 e6 02 	call	0x5cc	; 0x5cc <loop>
		if (serialEventRun) serialEventRun();
 672:	20 97       	sbiw	r28, 0x00	; 0
 674:	e1 f3       	breq	.-8      	; 0x66e <main+0x10>
 676:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 67a:	f9 cf       	rjmp	.-14     	; 0x66e <main+0x10>

0000067c <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
 67c:	08 95       	ret

0000067e <attachInterrupt>:
 67e:	82 30       	cpi	r24, 0x02	; 2
 680:	e8 f4       	brcc	.+58     	; 0x6bc <attachInterrupt+0x3e>
 682:	e8 2f       	mov	r30, r24
 684:	f0 e0       	ldi	r31, 0x00	; 0
 686:	ee 0f       	add	r30, r30
 688:	ff 1f       	adc	r31, r31
 68a:	e6 5e       	subi	r30, 0xE6	; 230
 68c:	fe 4f       	sbci	r31, 0xFE	; 254
 68e:	71 83       	std	Z+1, r23	; 0x01
 690:	60 83       	st	Z, r22
 692:	81 30       	cpi	r24, 0x01	; 1
 694:	41 f0       	breq	.+16     	; 0x6a6 <attachInterrupt+0x28>
 696:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 69a:	8c 7f       	andi	r24, 0xFC	; 252
 69c:	48 2b       	or	r20, r24
 69e:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 6a2:	e8 9a       	sbi	0x1d, 0	; 29
 6a4:	08 95       	ret
 6a6:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 6aa:	83 7f       	andi	r24, 0xF3	; 243
 6ac:	44 0f       	add	r20, r20
 6ae:	55 1f       	adc	r21, r21
 6b0:	44 0f       	add	r20, r20
 6b2:	55 1f       	adc	r21, r21
 6b4:	48 2b       	or	r20, r24
 6b6:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 6ba:	e9 9a       	sbi	0x1d, 1	; 29
 6bc:	08 95       	ret

000006be <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
 6be:	1f 92       	push	r1
 6c0:	0f 92       	push	r0
 6c2:	0f b6       	in	r0, 0x3f	; 63
 6c4:	0f 92       	push	r0
 6c6:	11 24       	eor	r1, r1
 6c8:	2f 93       	push	r18
 6ca:	3f 93       	push	r19
 6cc:	4f 93       	push	r20
 6ce:	5f 93       	push	r21
 6d0:	6f 93       	push	r22
 6d2:	7f 93       	push	r23
 6d4:	8f 93       	push	r24
 6d6:	9f 93       	push	r25
 6d8:	af 93       	push	r26
 6da:	bf 93       	push	r27
 6dc:	ef 93       	push	r30
 6de:	ff 93       	push	r31
 6e0:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <intFunc>
 6e4:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <intFunc+0x1>
 6e8:	09 95       	icall
 6ea:	ff 91       	pop	r31
 6ec:	ef 91       	pop	r30
 6ee:	bf 91       	pop	r27
 6f0:	af 91       	pop	r26
 6f2:	9f 91       	pop	r25
 6f4:	8f 91       	pop	r24
 6f6:	7f 91       	pop	r23
 6f8:	6f 91       	pop	r22
 6fa:	5f 91       	pop	r21
 6fc:	4f 91       	pop	r20
 6fe:	3f 91       	pop	r19
 700:	2f 91       	pop	r18
 702:	0f 90       	pop	r0
 704:	0f be       	out	0x3f, r0	; 63
 706:	0f 90       	pop	r0
 708:	1f 90       	pop	r1
 70a:	18 95       	reti

0000070c <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
 70c:	1f 92       	push	r1
 70e:	0f 92       	push	r0
 710:	0f b6       	in	r0, 0x3f	; 63
 712:	0f 92       	push	r0
 714:	11 24       	eor	r1, r1
 716:	2f 93       	push	r18
 718:	3f 93       	push	r19
 71a:	4f 93       	push	r20
 71c:	5f 93       	push	r21
 71e:	6f 93       	push	r22
 720:	7f 93       	push	r23
 722:	8f 93       	push	r24
 724:	9f 93       	push	r25
 726:	af 93       	push	r26
 728:	bf 93       	push	r27
 72a:	ef 93       	push	r30
 72c:	ff 93       	push	r31
 72e:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <intFunc+0x2>
 732:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <intFunc+0x3>
 736:	09 95       	icall
 738:	ff 91       	pop	r31
 73a:	ef 91       	pop	r30
 73c:	bf 91       	pop	r27
 73e:	af 91       	pop	r26
 740:	9f 91       	pop	r25
 742:	8f 91       	pop	r24
 744:	7f 91       	pop	r23
 746:	6f 91       	pop	r22
 748:	5f 91       	pop	r21
 74a:	4f 91       	pop	r20
 74c:	3f 91       	pop	r19
 74e:	2f 91       	pop	r18
 750:	0f 90       	pop	r0
 752:	0f be       	out	0x3f, r0	; 63
 754:	0f 90       	pop	r0
 756:	1f 90       	pop	r1
 758:	18 95       	reti

0000075a <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 75a:	1f 92       	push	r1
 75c:	0f 92       	push	r0
 75e:	0f b6       	in	r0, 0x3f	; 63
 760:	0f 92       	push	r0
 762:	11 24       	eor	r1, r1
 764:	2f 93       	push	r18
 766:	3f 93       	push	r19
 768:	8f 93       	push	r24
 76a:	9f 93       	push	r25
 76c:	af 93       	push	r26
 76e:	bf 93       	push	r27
 770:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <timer0_millis>
 774:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <timer0_millis+0x1>
 778:	a0 91 38 01 	lds	r26, 0x0138	; 0x800138 <timer0_millis+0x2>
 77c:	b0 91 39 01 	lds	r27, 0x0139	; 0x800139 <timer0_millis+0x3>
 780:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <timer0_fract>
 784:	23 e0       	ldi	r18, 0x03	; 3
 786:	23 0f       	add	r18, r19
 788:	2d 37       	cpi	r18, 0x7D	; 125
 78a:	20 f4       	brcc	.+8      	; 0x794 <__vector_16+0x3a>
 78c:	01 96       	adiw	r24, 0x01	; 1
 78e:	a1 1d       	adc	r26, r1
 790:	b1 1d       	adc	r27, r1
 792:	05 c0       	rjmp	.+10     	; 0x79e <__vector_16+0x44>
 794:	26 e8       	ldi	r18, 0x86	; 134
 796:	23 0f       	add	r18, r19
 798:	02 96       	adiw	r24, 0x02	; 2
 79a:	a1 1d       	adc	r26, r1
 79c:	b1 1d       	adc	r27, r1
 79e:	20 93 35 01 	sts	0x0135, r18	; 0x800135 <timer0_fract>
 7a2:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timer0_millis>
 7a6:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timer0_millis+0x1>
 7aa:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timer0_millis+0x2>
 7ae:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timer0_millis+0x3>
 7b2:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <timer0_overflow_count>
 7b6:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <timer0_overflow_count+0x1>
 7ba:	a0 91 3c 01 	lds	r26, 0x013C	; 0x80013c <timer0_overflow_count+0x2>
 7be:	b0 91 3d 01 	lds	r27, 0x013D	; 0x80013d <timer0_overflow_count+0x3>
 7c2:	01 96       	adiw	r24, 0x01	; 1
 7c4:	a1 1d       	adc	r26, r1
 7c6:	b1 1d       	adc	r27, r1
 7c8:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timer0_overflow_count>
 7cc:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timer0_overflow_count+0x1>
 7d0:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timer0_overflow_count+0x2>
 7d4:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timer0_overflow_count+0x3>
 7d8:	bf 91       	pop	r27
 7da:	af 91       	pop	r26
 7dc:	9f 91       	pop	r25
 7de:	8f 91       	pop	r24
 7e0:	3f 91       	pop	r19
 7e2:	2f 91       	pop	r18
 7e4:	0f 90       	pop	r0
 7e6:	0f be       	out	0x3f, r0	; 63
 7e8:	0f 90       	pop	r0
 7ea:	1f 90       	pop	r1
 7ec:	18 95       	reti

000007ee <micros>:
 7ee:	3f b7       	in	r19, 0x3f	; 63
 7f0:	f8 94       	cli
 7f2:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <timer0_overflow_count>
 7f6:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <timer0_overflow_count+0x1>
 7fa:	a0 91 3c 01 	lds	r26, 0x013C	; 0x80013c <timer0_overflow_count+0x2>
 7fe:	b0 91 3d 01 	lds	r27, 0x013D	; 0x80013d <timer0_overflow_count+0x3>
 802:	26 b5       	in	r18, 0x26	; 38
 804:	a8 9b       	sbis	0x15, 0	; 21
 806:	05 c0       	rjmp	.+10     	; 0x812 <micros+0x24>
 808:	2f 3f       	cpi	r18, 0xFF	; 255
 80a:	19 f0       	breq	.+6      	; 0x812 <micros+0x24>
 80c:	01 96       	adiw	r24, 0x01	; 1
 80e:	a1 1d       	adc	r26, r1
 810:	b1 1d       	adc	r27, r1
 812:	3f bf       	out	0x3f, r19	; 63
 814:	ba 2f       	mov	r27, r26
 816:	a9 2f       	mov	r26, r25
 818:	98 2f       	mov	r25, r24
 81a:	88 27       	eor	r24, r24
 81c:	82 0f       	add	r24, r18
 81e:	91 1d       	adc	r25, r1
 820:	a1 1d       	adc	r26, r1
 822:	b1 1d       	adc	r27, r1
 824:	bc 01       	movw	r22, r24
 826:	cd 01       	movw	r24, r26
 828:	42 e0       	ldi	r20, 0x02	; 2
 82a:	66 0f       	add	r22, r22
 82c:	77 1f       	adc	r23, r23
 82e:	88 1f       	adc	r24, r24
 830:	99 1f       	adc	r25, r25
 832:	4a 95       	dec	r20
 834:	d1 f7       	brne	.-12     	; 0x82a <micros+0x3c>
 836:	08 95       	ret

00000838 <delay>:
 838:	8f 92       	push	r8
 83a:	9f 92       	push	r9
 83c:	af 92       	push	r10
 83e:	bf 92       	push	r11
 840:	cf 92       	push	r12
 842:	df 92       	push	r13
 844:	ef 92       	push	r14
 846:	ff 92       	push	r15
 848:	6b 01       	movw	r12, r22
 84a:	7c 01       	movw	r14, r24
 84c:	0e 94 f7 03 	call	0x7ee	; 0x7ee <micros>
 850:	4b 01       	movw	r8, r22
 852:	5c 01       	movw	r10, r24
 854:	c1 14       	cp	r12, r1
 856:	d1 04       	cpc	r13, r1
 858:	e1 04       	cpc	r14, r1
 85a:	f1 04       	cpc	r15, r1
 85c:	01 f1       	breq	.+64     	; 0x89e <delay+0x66>
 85e:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <yield>
 862:	0e 94 f7 03 	call	0x7ee	; 0x7ee <micros>
 866:	dc 01       	movw	r26, r24
 868:	cb 01       	movw	r24, r22
 86a:	88 19       	sub	r24, r8
 86c:	99 09       	sbc	r25, r9
 86e:	aa 09       	sbc	r26, r10
 870:	bb 09       	sbc	r27, r11
 872:	88 3e       	cpi	r24, 0xE8	; 232
 874:	93 40       	sbci	r25, 0x03	; 3
 876:	a1 05       	cpc	r26, r1
 878:	b1 05       	cpc	r27, r1
 87a:	60 f3       	brcs	.-40     	; 0x854 <delay+0x1c>
 87c:	21 e0       	ldi	r18, 0x01	; 1
 87e:	c2 1a       	sub	r12, r18
 880:	d1 08       	sbc	r13, r1
 882:	e1 08       	sbc	r14, r1
 884:	f1 08       	sbc	r15, r1
 886:	88 ee       	ldi	r24, 0xE8	; 232
 888:	88 0e       	add	r8, r24
 88a:	83 e0       	ldi	r24, 0x03	; 3
 88c:	98 1e       	adc	r9, r24
 88e:	a1 1c       	adc	r10, r1
 890:	b1 1c       	adc	r11, r1
 892:	c1 14       	cp	r12, r1
 894:	d1 04       	cpc	r13, r1
 896:	e1 04       	cpc	r14, r1
 898:	f1 04       	cpc	r15, r1
 89a:	19 f7       	brne	.-58     	; 0x862 <delay+0x2a>
 89c:	db cf       	rjmp	.-74     	; 0x854 <delay+0x1c>
 89e:	ff 90       	pop	r15
 8a0:	ef 90       	pop	r14
 8a2:	df 90       	pop	r13
 8a4:	cf 90       	pop	r12
 8a6:	bf 90       	pop	r11
 8a8:	af 90       	pop	r10
 8aa:	9f 90       	pop	r9
 8ac:	8f 90       	pop	r8
 8ae:	08 95       	ret

000008b0 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 8b0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 8b2:	84 b5       	in	r24, 0x24	; 36
 8b4:	82 60       	ori	r24, 0x02	; 2
 8b6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 8b8:	84 b5       	in	r24, 0x24	; 36
 8ba:	81 60       	ori	r24, 0x01	; 1
 8bc:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 8be:	85 b5       	in	r24, 0x25	; 37
 8c0:	82 60       	ori	r24, 0x02	; 2
 8c2:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 8c4:	85 b5       	in	r24, 0x25	; 37
 8c6:	81 60       	ori	r24, 0x01	; 1
 8c8:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 8ca:	ee e6       	ldi	r30, 0x6E	; 110
 8cc:	f0 e0       	ldi	r31, 0x00	; 0
 8ce:	80 81       	ld	r24, Z
 8d0:	81 60       	ori	r24, 0x01	; 1
 8d2:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 8d4:	e1 e8       	ldi	r30, 0x81	; 129
 8d6:	f0 e0       	ldi	r31, 0x00	; 0
 8d8:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 8da:	80 81       	ld	r24, Z
 8dc:	82 60       	ori	r24, 0x02	; 2
 8de:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 8e0:	80 81       	ld	r24, Z
 8e2:	81 60       	ori	r24, 0x01	; 1
 8e4:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 8e6:	e0 e8       	ldi	r30, 0x80	; 128
 8e8:	f0 e0       	ldi	r31, 0x00	; 0
 8ea:	80 81       	ld	r24, Z
 8ec:	81 60       	ori	r24, 0x01	; 1
 8ee:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 8f0:	e1 eb       	ldi	r30, 0xB1	; 177
 8f2:	f0 e0       	ldi	r31, 0x00	; 0
 8f4:	80 81       	ld	r24, Z
 8f6:	84 60       	ori	r24, 0x04	; 4
 8f8:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 8fa:	e0 eb       	ldi	r30, 0xB0	; 176
 8fc:	f0 e0       	ldi	r31, 0x00	; 0
 8fe:	80 81       	ld	r24, Z
 900:	81 60       	ori	r24, 0x01	; 1
 902:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 904:	ea e7       	ldi	r30, 0x7A	; 122
 906:	f0 e0       	ldi	r31, 0x00	; 0
 908:	80 81       	ld	r24, Z
 90a:	84 60       	ori	r24, 0x04	; 4
 90c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 90e:	80 81       	ld	r24, Z
 910:	82 60       	ori	r24, 0x02	; 2
 912:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 914:	80 81       	ld	r24, Z
 916:	81 60       	ori	r24, 0x01	; 1
 918:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 91a:	80 81       	ld	r24, Z
 91c:	80 68       	ori	r24, 0x80	; 128
 91e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 920:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 924:	08 95       	ret

00000926 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 926:	83 30       	cpi	r24, 0x03	; 3
 928:	81 f0       	breq	.+32     	; 0x94a <turnOffPWM+0x24>
 92a:	28 f4       	brcc	.+10     	; 0x936 <turnOffPWM+0x10>
 92c:	81 30       	cpi	r24, 0x01	; 1
 92e:	99 f0       	breq	.+38     	; 0x956 <turnOffPWM+0x30>
 930:	82 30       	cpi	r24, 0x02	; 2
 932:	a1 f0       	breq	.+40     	; 0x95c <turnOffPWM+0x36>
 934:	08 95       	ret
 936:	87 30       	cpi	r24, 0x07	; 7
 938:	a9 f0       	breq	.+42     	; 0x964 <turnOffPWM+0x3e>
 93a:	88 30       	cpi	r24, 0x08	; 8
 93c:	b9 f0       	breq	.+46     	; 0x96c <turnOffPWM+0x46>
 93e:	84 30       	cpi	r24, 0x04	; 4
 940:	d1 f4       	brne	.+52     	; 0x976 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 942:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 946:	8f 7d       	andi	r24, 0xDF	; 223
 948:	03 c0       	rjmp	.+6      	; 0x950 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 94a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 94e:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 950:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 954:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 956:	84 b5       	in	r24, 0x24	; 36
 958:	8f 77       	andi	r24, 0x7F	; 127
 95a:	02 c0       	rjmp	.+4      	; 0x960 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 95c:	84 b5       	in	r24, 0x24	; 36
 95e:	8f 7d       	andi	r24, 0xDF	; 223
 960:	84 bd       	out	0x24, r24	; 36
 962:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 964:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 968:	8f 77       	andi	r24, 0x7F	; 127
 96a:	03 c0       	rjmp	.+6      	; 0x972 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 96c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 970:	8f 7d       	andi	r24, 0xDF	; 223
 972:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 976:	08 95       	ret

00000978 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 978:	cf 93       	push	r28
 97a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	fc 01       	movw	r30, r24
 980:	e4 58       	subi	r30, 0x84	; 132
 982:	ff 4f       	sbci	r31, 0xFF	; 255
 984:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 986:	fc 01       	movw	r30, r24
 988:	e0 57       	subi	r30, 0x70	; 112
 98a:	ff 4f       	sbci	r31, 0xFF	; 255
 98c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 98e:	88 23       	and	r24, r24
 990:	61 f1       	breq	.+88     	; 0x9ea <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	88 0f       	add	r24, r24
 996:	99 1f       	adc	r25, r25
 998:	fc 01       	movw	r30, r24
 99a:	e2 55       	subi	r30, 0x52	; 82
 99c:	ff 4f       	sbci	r31, 0xFF	; 255
 99e:	c5 91       	lpm	r28, Z+
 9a0:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 9a2:	fc 01       	movw	r30, r24
 9a4:	ec 55       	subi	r30, 0x5C	; 92
 9a6:	ff 4f       	sbci	r31, 0xFF	; 255
 9a8:	a5 91       	lpm	r26, Z+
 9aa:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 9ac:	61 11       	cpse	r22, r1
 9ae:	09 c0       	rjmp	.+18     	; 0x9c2 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 9b0:	9f b7       	in	r25, 0x3f	; 63
                cli();
 9b2:	f8 94       	cli
		*reg &= ~bit;
 9b4:	88 81       	ld	r24, Y
 9b6:	20 95       	com	r18
 9b8:	82 23       	and	r24, r18
 9ba:	88 83       	st	Y, r24
		*out &= ~bit;
 9bc:	ec 91       	ld	r30, X
 9be:	2e 23       	and	r18, r30
 9c0:	0b c0       	rjmp	.+22     	; 0x9d8 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 9c2:	62 30       	cpi	r22, 0x02	; 2
 9c4:	61 f4       	brne	.+24     	; 0x9de <pinMode+0x66>
		uint8_t oldSREG = SREG;
 9c6:	9f b7       	in	r25, 0x3f	; 63
                cli();
 9c8:	f8 94       	cli
		*reg &= ~bit;
 9ca:	88 81       	ld	r24, Y
 9cc:	32 2f       	mov	r19, r18
 9ce:	30 95       	com	r19
 9d0:	83 23       	and	r24, r19
 9d2:	88 83       	st	Y, r24
		*out |= bit;
 9d4:	ec 91       	ld	r30, X
 9d6:	2e 2b       	or	r18, r30
 9d8:	2c 93       	st	X, r18
		SREG = oldSREG;
 9da:	9f bf       	out	0x3f, r25	; 63
 9dc:	06 c0       	rjmp	.+12     	; 0x9ea <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 9de:	8f b7       	in	r24, 0x3f	; 63
                cli();
 9e0:	f8 94       	cli
		*reg |= bit;
 9e2:	e8 81       	ld	r30, Y
 9e4:	2e 2b       	or	r18, r30
 9e6:	28 83       	st	Y, r18
		SREG = oldSREG;
 9e8:	8f bf       	out	0x3f, r24	; 63
	}
}
 9ea:	df 91       	pop	r29
 9ec:	cf 91       	pop	r28
 9ee:	08 95       	ret

000009f0 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 9f0:	1f 93       	push	r17
 9f2:	cf 93       	push	r28
 9f4:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 9f6:	28 2f       	mov	r18, r24
 9f8:	30 e0       	ldi	r19, 0x00	; 0
 9fa:	f9 01       	movw	r30, r18
 9fc:	e8 59       	subi	r30, 0x98	; 152
 9fe:	ff 4f       	sbci	r31, 0xFF	; 255
 a00:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 a02:	f9 01       	movw	r30, r18
 a04:	e4 58       	subi	r30, 0x84	; 132
 a06:	ff 4f       	sbci	r31, 0xFF	; 255
 a08:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 a0a:	f9 01       	movw	r30, r18
 a0c:	e0 57       	subi	r30, 0x70	; 112
 a0e:	ff 4f       	sbci	r31, 0xFF	; 255
 a10:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 a12:	cc 23       	and	r28, r28
 a14:	c1 f0       	breq	.+48     	; 0xa46 <digitalWrite+0x56>
 a16:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 a18:	81 11       	cpse	r24, r1
 a1a:	0e 94 93 04 	call	0x926	; 0x926 <turnOffPWM>

	out = portOutputRegister(port);
 a1e:	ec 2f       	mov	r30, r28
 a20:	f0 e0       	ldi	r31, 0x00	; 0
 a22:	ee 0f       	add	r30, r30
 a24:	ff 1f       	adc	r31, r31
 a26:	ec 55       	subi	r30, 0x5C	; 92
 a28:	ff 4f       	sbci	r31, 0xFF	; 255
 a2a:	a5 91       	lpm	r26, Z+
 a2c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 a2e:	9f b7       	in	r25, 0x3f	; 63
	cli();
 a30:	f8 94       	cli

	if (val == LOW) {
 a32:	11 11       	cpse	r17, r1
 a34:	04 c0       	rjmp	.+8      	; 0xa3e <digitalWrite+0x4e>
		*out &= ~bit;
 a36:	8c 91       	ld	r24, X
 a38:	d0 95       	com	r29
 a3a:	d8 23       	and	r29, r24
 a3c:	02 c0       	rjmp	.+4      	; 0xa42 <digitalWrite+0x52>
	} else {
		*out |= bit;
 a3e:	ec 91       	ld	r30, X
 a40:	de 2b       	or	r29, r30
 a42:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 a44:	9f bf       	out	0x3f, r25	; 63
}
 a46:	df 91       	pop	r29
 a48:	cf 91       	pop	r28
 a4a:	1f 91       	pop	r17
 a4c:	08 95       	ret

00000a4e <_ZN8MsTimer23setEmPFvvE>:
#endif
}

void MsTimer2::stop() {
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || (__AVR_ATmega1280__)
	TIMSK2 &= ~(1<<TOIE2);
 a4e:	0f 93       	push	r16
 a50:	1f 93       	push	r17
 a52:	8b 01       	movw	r16, r22
 a54:	9c 01       	movw	r18, r24
 a56:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 a5a:	8e 7f       	andi	r24, 0xFE	; 254
 a5c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 a60:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 a64:	8c 7f       	andi	r24, 0xFC	; 252
 a66:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 a6a:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 a6e:	87 7f       	andi	r24, 0xF7	; 247
 a70:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 a74:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
 a78:	8f 7d       	andi	r24, 0xDF	; 223
 a7a:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
 a7e:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 a82:	8d 7f       	andi	r24, 0xFD	; 253
 a84:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 a88:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 a8c:	84 60       	ori	r24, 0x04	; 4
 a8e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 a92:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 a96:	8c 7f       	andi	r24, 0xFC	; 252
 a98:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 a9c:	86 e0       	ldi	r24, 0x06	; 6
 a9e:	90 e0       	ldi	r25, 0x00	; 0
 aa0:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <_ZN8MsTimer25tcnt2E+0x1>
 aa4:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <_ZN8MsTimer25tcnt2E>
 aa8:	01 15       	cp	r16, r1
 aaa:	11 05       	cpc	r17, r1
 aac:	21 05       	cpc	r18, r1
 aae:	31 05       	cpc	r19, r1
 ab0:	69 f4       	brne	.+26     	; 0xacc <_ZN8MsTimer23setEmPFvvE+0x7e>
 ab2:	81 e0       	ldi	r24, 0x01	; 1
 ab4:	90 e0       	ldi	r25, 0x00	; 0
 ab6:	a0 e0       	ldi	r26, 0x00	; 0
 ab8:	b0 e0       	ldi	r27, 0x00	; 0
 aba:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <_ZN8MsTimer25msecsE>
 abe:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <_ZN8MsTimer25msecsE+0x1>
 ac2:	a0 93 49 01 	sts	0x0149, r26	; 0x800149 <_ZN8MsTimer25msecsE+0x2>
 ac6:	b0 93 4a 01 	sts	0x014A, r27	; 0x80014a <_ZN8MsTimer25msecsE+0x3>
 aca:	08 c0       	rjmp	.+16     	; 0xadc <_ZN8MsTimer23setEmPFvvE+0x8e>
 acc:	00 93 47 01 	sts	0x0147, r16	; 0x800147 <_ZN8MsTimer25msecsE>
 ad0:	10 93 48 01 	sts	0x0148, r17	; 0x800148 <_ZN8MsTimer25msecsE+0x1>
 ad4:	20 93 49 01 	sts	0x0149, r18	; 0x800149 <_ZN8MsTimer25msecsE+0x2>
 ad8:	30 93 4a 01 	sts	0x014A, r19	; 0x80014a <_ZN8MsTimer25msecsE+0x3>
 adc:	50 93 46 01 	sts	0x0146, r21	; 0x800146 <_ZN8MsTimer24funcE+0x1>
 ae0:	40 93 45 01 	sts	0x0145, r20	; 0x800145 <_ZN8MsTimer24funcE>
 ae4:	1f 91       	pop	r17
 ae6:	0f 91       	pop	r16
 ae8:	08 95       	ret

00000aea <_ZN8MsTimer25startEv>:
 aea:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <_ZN8MsTimer25countE>
 aee:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <_ZN8MsTimer25countE+0x1>
 af2:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <_ZN8MsTimer25countE+0x2>
 af6:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <_ZN8MsTimer25countE+0x3>
 afa:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <_ZN8MsTimer211overflowingE>
 afe:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <_ZN8MsTimer25tcnt2E>
 b02:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <_ZN8MsTimer25tcnt2E+0x1>
 b06:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
 b0a:	e0 e7       	ldi	r30, 0x70	; 112
 b0c:	f0 e0       	ldi	r31, 0x00	; 0
 b0e:	80 81       	ld	r24, Z
 b10:	81 60       	ori	r24, 0x01	; 1
 b12:	80 83       	st	Z, r24
 b14:	08 95       	ret

00000b16 <_ZN8MsTimer29_overflowEv>:
	TIMSK &= ~(1<<TOIE2);
#endif
}

void MsTimer2::_overflow() {
	count += 1;
 b16:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <_ZN8MsTimer25countE>
 b1a:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <_ZN8MsTimer25countE+0x1>
 b1e:	a0 91 43 01 	lds	r26, 0x0143	; 0x800143 <_ZN8MsTimer25countE+0x2>
 b22:	b0 91 44 01 	lds	r27, 0x0144	; 0x800144 <_ZN8MsTimer25countE+0x3>
 b26:	01 96       	adiw	r24, 0x01	; 1
 b28:	a1 1d       	adc	r26, r1
 b2a:	b1 1d       	adc	r27, r1
 b2c:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <_ZN8MsTimer25countE>
 b30:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <_ZN8MsTimer25countE+0x1>
 b34:	a0 93 43 01 	sts	0x0143, r26	; 0x800143 <_ZN8MsTimer25countE+0x2>
 b38:	b0 93 44 01 	sts	0x0144, r27	; 0x800144 <_ZN8MsTimer25countE+0x3>
	
	if (count >= msecs && !overflowing) {
 b3c:	40 91 41 01 	lds	r20, 0x0141	; 0x800141 <_ZN8MsTimer25countE>
 b40:	50 91 42 01 	lds	r21, 0x0142	; 0x800142 <_ZN8MsTimer25countE+0x1>
 b44:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <_ZN8MsTimer25countE+0x2>
 b48:	70 91 44 01 	lds	r23, 0x0144	; 0x800144 <_ZN8MsTimer25countE+0x3>
 b4c:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <_ZN8MsTimer25msecsE>
 b50:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <_ZN8MsTimer25msecsE+0x1>
 b54:	a0 91 49 01 	lds	r26, 0x0149	; 0x800149 <_ZN8MsTimer25msecsE+0x2>
 b58:	b0 91 4a 01 	lds	r27, 0x014A	; 0x80014a <_ZN8MsTimer25msecsE+0x3>
 b5c:	48 17       	cp	r20, r24
 b5e:	59 07       	cpc	r21, r25
 b60:	6a 07       	cpc	r22, r26
 b62:	7b 07       	cpc	r23, r27
 b64:	b0 f0       	brcs	.+44     	; 0xb92 <_ZN8MsTimer29_overflowEv+0x7c>
 b66:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_ZN8MsTimer211overflowingE>
 b6a:	81 11       	cpse	r24, r1
 b6c:	12 c0       	rjmp	.+36     	; 0xb92 <_ZN8MsTimer29_overflowEv+0x7c>
		overflowing = 1;
 b6e:	81 e0       	ldi	r24, 0x01	; 1
 b70:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <_ZN8MsTimer211overflowingE>
		count = 0;
 b74:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <_ZN8MsTimer25countE>
 b78:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <_ZN8MsTimer25countE+0x1>
 b7c:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <_ZN8MsTimer25countE+0x2>
 b80:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <_ZN8MsTimer25countE+0x3>
		(*func)();
 b84:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <_ZN8MsTimer24funcE>
 b88:	f0 91 46 01 	lds	r31, 0x0146	; 0x800146 <_ZN8MsTimer24funcE+0x1>
 b8c:	09 95       	icall
		overflowing = 0;
 b8e:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <_ZN8MsTimer211overflowingE>
 b92:	08 95       	ret

00000b94 <__vector_9>:
	}
}

ISR(TIMER2_OVF_vect) {
 b94:	1f 92       	push	r1
 b96:	0f 92       	push	r0
 b98:	0f b6       	in	r0, 0x3f	; 63
 b9a:	0f 92       	push	r0
 b9c:	11 24       	eor	r1, r1
 b9e:	2f 93       	push	r18
 ba0:	3f 93       	push	r19
 ba2:	4f 93       	push	r20
 ba4:	5f 93       	push	r21
 ba6:	6f 93       	push	r22
 ba8:	7f 93       	push	r23
 baa:	8f 93       	push	r24
 bac:	9f 93       	push	r25
 bae:	af 93       	push	r26
 bb0:	bf 93       	push	r27
 bb2:	ef 93       	push	r30
 bb4:	ff 93       	push	r31
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || (__AVR_ATmega1280__)
	TCNT2 = MsTimer2::tcnt2;
 bb6:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <_ZN8MsTimer25tcnt2E>
 bba:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <_ZN8MsTimer25tcnt2E+0x1>
 bbe:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
#elif defined (__AVR_ATmega128__)
	TCNT2 = MsTimer2::tcnt2;
#elif defined (__AVR_ATmega8__)
	TCNT2 = MsTimer2::tcnt2;
#endif
	MsTimer2::_overflow();
 bc2:	0e 94 8b 05 	call	0xb16	; 0xb16 <_ZN8MsTimer29_overflowEv>
}
 bc6:	ff 91       	pop	r31
 bc8:	ef 91       	pop	r30
 bca:	bf 91       	pop	r27
 bcc:	af 91       	pop	r26
 bce:	9f 91       	pop	r25
 bd0:	8f 91       	pop	r24
 bd2:	7f 91       	pop	r23
 bd4:	6f 91       	pop	r22
 bd6:	5f 91       	pop	r21
 bd8:	4f 91       	pop	r20
 bda:	3f 91       	pop	r19
 bdc:	2f 91       	pop	r18
 bde:	0f 90       	pop	r0
 be0:	0f be       	out	0x3f, r0	; 63
 be2:	0f 90       	pop	r0
 be4:	1f 90       	pop	r1
 be6:	18 95       	reti

00000be8 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 be8:	08 95       	ret

00000bea <__divmodhi4>:
 bea:	97 fb       	bst	r25, 7
 bec:	07 2e       	mov	r0, r23
 bee:	16 f4       	brtc	.+4      	; 0xbf4 <__divmodhi4+0xa>
 bf0:	00 94       	com	r0
 bf2:	07 d0       	rcall	.+14     	; 0xc02 <__divmodhi4_neg1>
 bf4:	77 fd       	sbrc	r23, 7
 bf6:	09 d0       	rcall	.+18     	; 0xc0a <__divmodhi4_neg2>
 bf8:	0e 94 09 06 	call	0xc12	; 0xc12 <__udivmodhi4>
 bfc:	07 fc       	sbrc	r0, 7
 bfe:	05 d0       	rcall	.+10     	; 0xc0a <__divmodhi4_neg2>
 c00:	3e f4       	brtc	.+14     	; 0xc10 <__divmodhi4_exit>

00000c02 <__divmodhi4_neg1>:
 c02:	90 95       	com	r25
 c04:	81 95       	neg	r24
 c06:	9f 4f       	sbci	r25, 0xFF	; 255
 c08:	08 95       	ret

00000c0a <__divmodhi4_neg2>:
 c0a:	70 95       	com	r23
 c0c:	61 95       	neg	r22
 c0e:	7f 4f       	sbci	r23, 0xFF	; 255

00000c10 <__divmodhi4_exit>:
 c10:	08 95       	ret

00000c12 <__udivmodhi4>:
 c12:	aa 1b       	sub	r26, r26
 c14:	bb 1b       	sub	r27, r27
 c16:	51 e1       	ldi	r21, 0x11	; 17
 c18:	07 c0       	rjmp	.+14     	; 0xc28 <__udivmodhi4_ep>

00000c1a <__udivmodhi4_loop>:
 c1a:	aa 1f       	adc	r26, r26
 c1c:	bb 1f       	adc	r27, r27
 c1e:	a6 17       	cp	r26, r22
 c20:	b7 07       	cpc	r27, r23
 c22:	10 f0       	brcs	.+4      	; 0xc28 <__udivmodhi4_ep>
 c24:	a6 1b       	sub	r26, r22
 c26:	b7 0b       	sbc	r27, r23

00000c28 <__udivmodhi4_ep>:
 c28:	88 1f       	adc	r24, r24
 c2a:	99 1f       	adc	r25, r25
 c2c:	5a 95       	dec	r21
 c2e:	a9 f7       	brne	.-22     	; 0xc1a <__udivmodhi4_loop>
 c30:	80 95       	com	r24
 c32:	90 95       	com	r25
 c34:	bc 01       	movw	r22, r24
 c36:	cd 01       	movw	r24, r26
 c38:	08 95       	ret

00000c3a <_exit>:
 c3a:	f8 94       	cli

00000c3c <__stop_program>:
 c3c:	ff cf       	rjmp	.-2      	; 0xc3c <__stop_program>
