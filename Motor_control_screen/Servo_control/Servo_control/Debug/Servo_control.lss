
Servo_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000110  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007fe  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c3  00000000  00000000  000009f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029a  00000000  00000000  000010b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001350  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e5  00000000  00000000  00001374  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f9  00000000  00000000  00001759  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001852  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define PULSE_MID 1500	// 1.5ms pulse for center

static inline void initialize_timer1(void)
{
	
	TCCR1A |= (1 << WGM11) | (1 << COM1A1);  //PWM, Phase Correct, 9-bit mode of operation
  80:	e0 e8       	ldi	r30, 0x80	; 128
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	82 68       	ori	r24, 0x82	; 130
  88:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << WGM13); //Wave form generation mode
  8a:	e1 e8       	ldi	r30, 0x81	; 129
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	88 61       	ori	r24, 0x18	; 24
  92:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS11);  //prescaler /1 (no prescaler)
  94:	80 81       	ld	r24, Z
  96:	82 60       	ori	r24, 0x02	; 2
  98:	80 83       	st	Z, r24
	
	ICR1 = 20000 ; //Input capture register (TOP value)
  9a:	80 e2       	ldi	r24, 0x20	; 32
  9c:	9e e4       	ldi	r25, 0x4E	; 78
  9e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  a2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	//TCCR1A |= (1 << COM1A1); //Direct ouput on PB1/ OC1A
	
	DDRB |= (1 << PORTB1); //Setting D9 to output
  a6:	21 9a       	sbi	0x04, 1	; 4


static inline void servo_write(int angle)
{
	
	  OCR1A = (1019)+angle*((4889-1019)/(180));
  a8:	e8 e8       	ldi	r30, 0x88	; 136
  aa:	f0 e0       	ldi	r31, 0x00	; 0
	 // if (angle == 90)
		 //OCR1A = ((1019)+angle*((4889-1019)/(180)))-120;
}

int main(void)
{
  ac:	8b ef       	ldi	r24, 0xFB	; 251
  ae:	93 e0       	ldi	r25, 0x03	; 3


static inline void servo_write(int angle)
{
	
	  OCR1A = (1019)+angle*((4889-1019)/(180));
  b0:	91 83       	std	Z+1, r25	; 0x01
  b2:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	2f e3       	ldi	r18, 0x3F	; 63
  b6:	32 e4       	ldi	r19, 0x42	; 66
  b8:	4f e0       	ldi	r20, 0x0F	; 15
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	30 40       	sbci	r19, 0x00	; 0
  be:	40 40       	sbci	r20, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x3a>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x44>
  c4:	00 00       	nop
  c6:	8e 52       	subi	r24, 0x2E	; 46
  c8:	9f 4f       	sbci	r25, 0xFF	; 255
		
		servo_write(0);
   }*/
   while(1)
   {
	      for  (i = 0; i <= 180; i+=10)
  ca:	81 39       	cpi	r24, 0x91	; 145
  cc:	23 e1       	ldi	r18, 0x13	; 19
  ce:	92 07       	cpc	r25, r18
  d0:	79 f7       	brne	.-34     	; 0xb0 <main+0x30>
  d2:	3f e3       	ldi	r19, 0x3F	; 63
  d4:	42 e4       	ldi	r20, 0x42	; 66
  d6:	8f e0       	ldi	r24, 0x0F	; 15
  d8:	31 50       	subi	r19, 0x01	; 1
  da:	40 40       	sbci	r20, 0x00	; 0
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x58>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x62>
  e2:	00 00       	nop
  e4:	8f eb       	ldi	r24, 0xBF	; 191
  e6:	92 e1       	ldi	r25, 0x12	; 18


static inline void servo_write(int angle)
{
	
	  OCR1A = (1019)+angle*((4889-1019)/(180));
  e8:	91 83       	std	Z+1, r25	; 0x01
  ea:	80 83       	st	Z, r24
  ec:	2f e3       	ldi	r18, 0x3F	; 63
  ee:	32 e4       	ldi	r19, 0x42	; 66
  f0:	4f e0       	ldi	r20, 0x0F	; 15
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	30 40       	sbci	r19, 0x00	; 0
  f6:	40 40       	sbci	r20, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x72>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x7c>
  fc:	00 00       	nop
  fe:	82 5d       	subi	r24, 0xD2	; 210
 100:	91 09       	sbc	r25, r1
		      _delay_ms(5000);
	      }
	      
	      _delay_ms(5000);
	      
	      for (i = 180; i >= 0; i-=10)
 102:	89 32       	cpi	r24, 0x29	; 41
 104:	23 e0       	ldi	r18, 0x03	; 3
 106:	92 07       	cpc	r25, r18
 108:	79 f7       	brne	.-34     	; 0xe8 <main+0x68>
 10a:	d0 cf       	rjmp	.-96     	; 0xac <main+0x2c>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
